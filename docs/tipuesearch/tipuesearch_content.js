var tipuesearch = {"pages":[{"title":" KWN Deformation ","text":"KWN Deformation KWN precipitation model including the effect of deformation via excess vacancy concentration calculation (phenomenological law for vacancy production). Developer Info Madeleine Bignon\nPratheek Shanthraj\nSamuel Engel","tags":"home","loc":"index.html"},{"title":"tParameters – KWN Deformation ","text":"type, public :: tParameters Contents Variables kwn_nSteps kwn_stepsize kwn_step0 lattice_param atomic_volume molar_volume misfit_energy gamma_coherent vacancy_generation vacancy_sink_spacing vacancy_energy vacancy_migration_energy vacancy_diffusion0 mean_radius_initial standard_deviation volume_fraction_initial rho_0 rho_s strain_rate dislocation_arrangement burgers jog_formation_energy q_dislocation solute_strength c0_matrix ceq_matrix ceq_precipitate diffusion0 migration_energy bins output Components Type Visibility Attributes Name Initial integer, public :: kwn_nSteps real(kind=pReal), public :: kwn_stepsize real(kind=pReal), public :: kwn_step0 real(kind=pReal), public :: lattice_param real(kind=pReal), public :: atomic_volume real(kind=pReal), public :: molar_volume real(kind=pReal), public :: misfit_energy real(kind=pReal), public :: gamma_coherent real(kind=pReal), public :: vacancy_generation real(kind=pReal), public :: vacancy_sink_spacing real(kind=pReal), public :: vacancy_energy real(kind=pReal), public :: vacancy_migration_energy real(kind=pReal), public :: vacancy_diffusion0 real(kind=pReal), public :: mean_radius_initial real(kind=pReal), public :: standard_deviation real(kind=pReal), public :: volume_fraction_initial real(kind=pReal), public :: rho_0 real(kind=pReal), public :: rho_s real(kind=pReal), public :: strain_rate real(kind=pReal), public :: dislocation_arrangement real(kind=pReal), public :: burgers real(kind=pReal), public :: jog_formation_energy real(kind=pReal), public :: q_dislocation real(kind=pReal), public :: solute_strength real(kind=pReal), public, dimension(:), allocatable :: c0_matrix real(kind=pReal), public, dimension(:), allocatable :: ceq_matrix real(kind=pReal), public, dimension(:), allocatable :: ceq_precipitate real(kind=pReal), public, dimension(:), allocatable :: diffusion0 real(kind=pReal), public, dimension(:), allocatable :: migration_energy real(kind=pReal), public, dimension(:), allocatable :: bins character(len=15), public, allocatable, dimension(:) :: output","tags":"","loc":"type/tparameters.html"},{"title":"tKwnpowerlawState – KWN Deformation ","text":"type, public :: tKwnpowerlawState Contents Variables precipitate_density c_vacancy time Components Type Visibility Attributes Name Initial real(kind=pReal), public, pointer, dimension(:,:) :: precipitate_density real(kind=pReal), public, dimension(  :), allocatable :: c_vacancy real(kind=pReal), public, dimension(  :), allocatable :: time","tags":"","loc":"type/tkwnpowerlawstate.html"},{"title":"tKwnpowerlawMicrostructure – KWN Deformation ","text":"type, public :: tKwnpowerlawMicrostructure Contents Variables total_precipitate_density avg_precipitate_radius precipitate_volume_frac c_matrix Components Type Visibility Attributes Name Initial real(kind=pReal), public, dimension(:), allocatable :: total_precipitate_density real(kind=pReal), public, dimension(:), allocatable :: avg_precipitate_radius real(kind=pReal), public, dimension(:), allocatable :: precipitate_volume_frac real(kind=pReal), public, dimension(:,:), allocatable :: c_matrix","tags":"","loc":"type/tkwnpowerlawmicrostructure.html"},{"title":"run_model – KWN Deformation","text":"public subroutine run_model(prm, dot, stt, dst, Nmembers, N_elements, en, stoechiometry, normalized_distribution_function, Temperature, radius_crit, interface_c, time_record_step, c_thermal_vacancy, shape_parameter, sigma_r, A, incubation, Q_stress, n, diffusion_coefficient, dt, dt_max, total_time, growth_rate_array, x_eq_interface, filesuffix, testfolder) Arguments Type Intent Optional Attributes Name type( tParameters ), intent(inout) :: prm type( tKwnpowerlawState ), intent(inout) :: dot type( tKwnpowerlawState ), intent(inout) :: stt type( tKwnpowerlawMicrostructure ), intent(inout) :: dst integer, intent(in) :: Nmembers integer, intent(in) :: N_elements integer, intent(in) :: en integer, intent(in), dimension(:), allocatable :: stoechiometry real(kind=pReal), intent(in), dimension(:,:), allocatable :: normalized_distribution_function real(kind=pReal), intent(inout) :: Temperature real(kind=pReal), intent(inout) :: radius_crit real(kind=pReal), intent(in) :: interface_c real(kind=pReal), intent(in) :: time_record_step real(kind=pReal), intent(inout) :: c_thermal_vacancy real(kind=pReal), intent(in) :: shape_parameter real(kind=pReal), intent(in) :: sigma_r real(kind=pReal), intent(in) :: A real(kind=pReal), intent(in) :: incubation real(kind=pReal), intent(in) :: Q_stress real(kind=pReal), intent(in) :: n real(kind=pReal), intent(inout), dimension(:), allocatable :: diffusion_coefficient real(kind=pReal), intent(inout) :: dt real(kind=pReal), intent(in) :: dt_max real(kind=pReal), intent(in) :: total_time real(kind=pReal), intent(inout), dimension(:), allocatable :: growth_rate_array real(kind=pReal), intent(inout), dimension(:), allocatable :: x_eq_interface character(len=100), intent(in) :: filesuffix character(len=100), intent(in) :: testfolder ! local variables Contents None","tags":"","loc":"proc/run_model.html"},{"title":"read_configuration – KWN Deformation","text":"public subroutine read_configuration(testfolder, prm, Temperature, shape_parameter, total_time, dt_max, time_record_step, sigma_r, A, Q_stress, n, incubation, stoechiometry, N_elements) !!!!!!!!! Arguments Type Intent Optional Attributes Name character(len=100), intent(out) :: testfolder type( tParameters ), intent(inout) :: prm real(kind=pReal), intent(out) :: Temperature real(kind=pReal), intent(out) :: shape_parameter real(kind=pReal), intent(out) :: total_time real(kind=pReal), intent(out) :: dt_max real(kind=pReal), intent(out) :: time_record_step real(kind=pReal), intent(out) :: sigma_r real(kind=pReal), intent(out) :: A real(kind=pReal), intent(out) :: Q_stress real(kind=pReal), intent(out) :: n real(kind=pReal), intent(out) :: incubation integer, intent(inout), dimension(:), allocatable :: stoechiometry integer, intent(in) :: N_elements Contents None","tags":"","loc":"proc/read_configuration.html"},{"title":"output_results – KWN Deformation","text":"public subroutine output_results(testfolder, filesuffix, stt, dst, diffusion_coefficient, c_thermal_vacancy, nucleation_rate, production_rate, annihilation_rate, dislocation_density, radius_crit, en) Arguments Type Intent Optional Attributes Name character(len=100), intent(in) :: testfolder character(len=100), intent(in) :: filesuffix type( tKwnpowerlawState ), intent(in) :: stt type( tKwnpowerlawMicrostructure ), intent(in) :: dst real(kind=pReal), intent(in), dimension(:), allocatable :: diffusion_coefficient real(kind=pReal), intent(in) :: c_thermal_vacancy real(kind=pReal), intent(in) :: nucleation_rate real(kind=pReal), intent(in) :: production_rate real(kind=pReal), intent(in) :: annihilation_rate real(kind=pReal), intent(in) :: dislocation_density real(kind=pReal), intent(in) :: radius_crit integer, intent(in) :: en Contents None","tags":"","loc":"proc/output_results.html"},{"title":"calculate_shear_modulus – KWN Deformation","text":"public function calculate_shear_modulus(Temperature) Arguments Type Intent Optional Attributes Name real(kind=pReal), intent(in) :: Temperature Return Value real(kind=pReal) Contents None","tags":"","loc":"proc/calculate_shear_modulus.html"},{"title":"calculate_dislocation_density – KWN Deformation","text":"public function calculate_dislocation_density(rho_0, rho_s, strain) Arguments Type Intent Optional Attributes Name real(kind=pReal), intent(in) :: rho_0 real(kind=pReal), intent(in) :: rho_s real(kind=pReal), intent(in) :: strain Return Value real(kind=pReal) Contents None","tags":"","loc":"proc/calculate_dislocation_density.html"},{"title":"calculate_binary_alloy_critical_radius – KWN Deformation","text":"public function calculate_binary_alloy_critical_radius(Temperature, dst, prm, en) Arguments Type Intent Optional Attributes Name real(kind=pReal), intent(in) :: Temperature type( tKwnpowerlawMicrostructure ), intent(in) :: dst type( tParameters ), intent(in) :: prm integer, intent(in) :: en Return Value real(kind=pReal) Contents None","tags":"","loc":"proc/calculate_binary_alloy_critical_radius.html"},{"title":"calculate_beta_star – KWN Deformation","text":"public function calculate_beta_star(radius_crit, lattice_param, diffusion_coefficient, c_matrix, en) Function for calculating beta_star for binary or ternary mixtures. Arguments Type Intent Optional Attributes Name real(kind=pReal), intent(in) :: radius_crit real(kind=pReal), intent(in) :: lattice_param real(kind=pReal), intent(in), dimension(:), allocatable :: diffusion_coefficient real(kind=pReal), intent(in), dimension(:,:), allocatable :: c_matrix integer, intent(in) :: en Return Value real(kind=pReal) Contents None","tags":"","loc":"proc/calculate_beta_star.html"},{"title":"calculate_nucleation_rate – KWN Deformation","text":"public function calculate_nucleation_rate(nucleation_site_density, zeldovich_factor, beta_star, gamma_coherent, radius_crit, Temperature, incubation_time, time, en) Arguments Type Intent Optional Attributes Name real(kind=pReal), intent(in) :: nucleation_site_density real(kind=pReal), intent(in) :: zeldovich_factor real(kind=pReal), intent(in) :: beta_star real(kind=pReal), intent(in) :: gamma_coherent real(kind=pReal), intent(in) :: radius_crit real(kind=pReal), intent(in) :: Temperature real(kind=pReal), intent(in) :: incubation_time real(kind=pReal), intent(in), dimension(:), allocatable :: time integer, intent(in) :: en Return Value real(kind=pReal) Contents None","tags":"","loc":"proc/calculate_nucleation_rate.html"},{"title":"set_initial_timestep_constants – KWN Deformation","text":"public subroutine set_initial_timestep_constants(prm, stt, dot, Temperature, sigma_r, A, Q_stress, n, dt, en, diffusion_coefficient, c_thermal_vacancy, dislocation_density, production_rate, annihilation_rate) Arguments Type Intent Optional Attributes Name type( tParameters ), intent(in) :: prm type( tKwnpowerlawState ), intent(inout) :: stt type( tKwnpowerlawState ), intent(inout) :: dot real(kind=pReal), intent(in) :: Temperature real(kind=pReal), intent(in) :: sigma_r real(kind=pReal), intent(in) :: A real(kind=pReal), intent(in) :: Q_stress real(kind=pReal), intent(in) :: n real(kind=pReal), intent(in) :: dt integer, intent(in) :: en real(kind=pReal), intent(out), dimension(:), allocatable :: diffusion_coefficient real(kind=pReal), intent(out) :: c_thermal_vacancy real(kind=pReal), intent(out) :: dislocation_density real(kind=pReal), intent(out) :: production_rate real(kind=pReal), intent(out) :: annihilation_rate Contents None","tags":"","loc":"proc/set_initial_timestep_constants.html"},{"title":"update_precipate_properties – KWN Deformation","text":"public subroutine update_precipate_properties(prm, dst, stt, en) Arguments Type Intent Optional Attributes Name type( tParameters ), intent(in) :: prm type( tKwnpowerlawMicrostructure ), intent(inout) :: dst type( tKwnpowerlawState ), intent(in) :: stt integer, intent(in) :: en Contents None","tags":"","loc":"proc/update_precipate_properties.html"},{"title":"interface_composition – KWN Deformation","text":"public subroutine interface_composition(Temperature, N_elements, N_steps, stoechiometry, c_matrix, ceq_matrix, atomic_volume, na, molar_volume, ceq_precipitate, bins, gamma_coherent, R, x_eq_interface, diffusion_coefficient, volume_fraction, misfit_energy) Arguments Type Intent Optional Attributes Name real(kind=pReal), intent(in) :: Temperature integer, intent(in) :: N_elements integer, intent(in) :: N_steps integer, intent(in), dimension(N_elements+1) :: stoechiometry real(kind=pReal), intent(in), dimension(N_elements) :: c_matrix real(kind=pReal), intent(in), dimension(N_elements) :: ceq_matrix real(kind=pReal), intent(in) :: atomic_volume real(kind=pReal), intent(in) :: na real(kind=pReal), intent(in) :: molar_volume real(kind=pReal), intent(in), dimension(N_elements) :: ceq_precipitate real(kind=pReal), intent(in), dimension(0:N_steps) :: bins real(kind=pReal), intent(in) :: gamma_coherent real(kind=pReal), intent(in) :: R real(kind=pReal), intent(inout), dimension(0:N_steps) :: x_eq_interface real(kind=pReal), intent(in), dimension(N_elements) :: diffusion_coefficient real(kind=pReal), intent(in) :: volume_fraction real(kind=pReal), intent(in) :: misfit_energy Contents None","tags":"","loc":"proc/interface_composition.html"},{"title":"growth_precipitate – KWN Deformation","text":"public subroutine growth_precipitate(N_elements, N_Steps, bins, interface_c, x_eq_interface, atomic_volume, na, molar_volume, ceq_precipitate, precipitate_density, dot_precipitate_density, nucleation_rate, diffusion_coefficient, c_matrix, growth_rate_array, radius_crit) Arguments Type Intent Optional Attributes Name integer, intent(in) :: N_elements integer, intent(in) :: N_Steps real(kind=pReal), intent(in), dimension(0:N_steps) :: bins real(kind=pReal) :: interface_c real(kind=pReal), intent(in), dimension(0:N_steps) :: x_eq_interface real(kind=pReal), intent(in) :: atomic_volume real(kind=pReal), intent(in) :: na real(kind=pReal), intent(in) :: molar_volume real(kind=pReal), intent(in), dimension(N_elements) :: ceq_precipitate real(kind=pReal), intent(in), dimension(N_steps) :: precipitate_density real(kind=pReal), intent(inout), dimension(N_steps) :: dot_precipitate_density real(kind=pReal), intent(in) :: nucleation_rate real(kind=pReal), intent(in), dimension(N_elements) :: diffusion_coefficient real(kind=pReal), intent(in), dimension(N_elements) :: c_matrix real(kind=pReal), intent(inout), dimension(0:N_steps) :: growth_rate_array real(kind=pReal), intent(inout) :: radius_crit Contents None","tags":"","loc":"proc/growth_precipitate.html"},{"title":"initialise_model_state – KWN Deformation","text":"public subroutine initialise_model_state(prm, dot, stt, dst, Nmembers, N_elements, en, stoechiometry, normalized_distribution_function, Temperature, radius_crit, interface_c, time_record_step, c_thermal_vacancy, shape_parameter, sigma_r, A, incubation, Q_stress, n, diffusion_coefficient, dt, dt_max, total_time, growth_rate_array, x_eq_interface, filesuffix, testfolder) ! read the configuration file, using data arrays allocated above\n! some conversions\n initialise the bins for the size distribution Arguments Type Intent Optional Attributes Name type( tParameters ), intent(out) :: prm type( tKwnpowerlawState ), intent(out) :: dot type( tKwnpowerlawState ), intent(out) :: stt type( tKwnpowerlawMicrostructure ), intent(out) :: dst integer, intent(out) :: Nmembers integer, intent(out) :: N_elements integer, intent(out) :: en integer, intent(out), dimension(:), allocatable :: stoechiometry real(kind=pReal), intent(out), dimension(:,:), allocatable :: normalized_distribution_function real(kind=pReal), intent(out) :: Temperature real(kind=pReal), intent(out) :: radius_crit real(kind=pReal), intent(out) :: interface_c real(kind=pReal), intent(out) :: time_record_step real(kind=pReal), intent(out) :: c_thermal_vacancy real(kind=pReal), intent(out) :: shape_parameter real(kind=pReal), intent(out) :: sigma_r real(kind=pReal), intent(out) :: A real(kind=pReal), intent(out) :: incubation real(kind=pReal), intent(out) :: Q_stress real(kind=pReal), intent(out) :: n real(kind=pReal), intent(out), dimension(:), allocatable :: diffusion_coefficient real(kind=pReal), intent(out) :: dt real(kind=pReal), intent(out) :: dt_max real(kind=pReal), intent(out) :: total_time real(kind=pReal), intent(out), dimension(:), allocatable :: growth_rate_array real(kind=pReal), intent(out), dimension(:), allocatable :: x_eq_interface character(len=100), intent(out) :: filesuffix character(len=100), intent(out) :: testfolder Contents None","tags":"","loc":"proc/initialise_model_state.html"},{"title":"initialise_outputs – KWN Deformation","text":"public subroutine initialise_outputs(testfolder, filesuffix, prm, stt, dst, nucleation_rate, radius_crit, shape_parameter, Temperature, dt, dt_max, growth_rate_array, mean_particle_strength, Q_stress, time_record_step, total_time, x_eq_interface, en) Arguments Type Intent Optional Attributes Name character(len=100), intent(in) :: testfolder character(len=100), intent(in) :: filesuffix type( tParameters ), intent(in) :: prm type( tKwnpowerlawState ), intent(in) :: stt type( tKwnpowerlawMicrostructure ), intent(in) :: dst real(kind=pReal), intent(in) :: nucleation_rate real(kind=pReal), intent(in) :: radius_crit real(kind=pReal), intent(in) :: shape_parameter real(kind=pReal), intent(in) :: Temperature real(kind=pReal), intent(in) :: dt real(kind=pReal), intent(in) :: dt_max real(kind=pReal), intent(in), dimension(:), allocatable :: growth_rate_array real(kind=pReal), intent(in) :: mean_particle_strength real(kind=pReal), intent(in) :: Q_stress real(kind=pReal), intent(in) :: time_record_step real(kind=pReal), intent(in) :: total_time real(kind=pReal), intent(in), dimension(:), allocatable :: x_eq_interface integer, intent(in) :: en Contents None","tags":"","loc":"proc/initialise_outputs.html"},{"title":"KWN_model – KWN Deformation","text":"Uses KWN_model_functions KWN_model_routines KWN_parameters KWN_data_types KWN_io Contents Subroutines run_model Subroutines public subroutine run_model (prm, dot, stt, dst, Nmembers, N_elements, en, stoechiometry, normalized_distribution_function, Temperature, radius_crit, interface_c, time_record_step, c_thermal_vacancy, shape_parameter, sigma_r, A, incubation, Q_stress, n, diffusion_coefficient, dt, dt_max, total_time, growth_rate_array, x_eq_interface, filesuffix, testfolder) Arguments Type Intent Optional Attributes Name type( tParameters ), intent(inout) :: prm type( tKwnpowerlawState ), intent(inout) :: dot type( tKwnpowerlawState ), intent(inout) :: stt type( tKwnpowerlawMicrostructure ), intent(inout) :: dst integer, intent(in) :: Nmembers integer, intent(in) :: N_elements integer, intent(in) :: en integer, intent(in), dimension(:), allocatable :: stoechiometry real(kind=pReal), intent(in), dimension(:,:), allocatable :: normalized_distribution_function real(kind=pReal), intent(inout) :: Temperature real(kind=pReal), intent(inout) :: radius_crit real(kind=pReal), intent(in) :: interface_c real(kind=pReal), intent(in) :: time_record_step real(kind=pReal), intent(inout) :: c_thermal_vacancy real(kind=pReal), intent(in) :: shape_parameter real(kind=pReal), intent(in) :: sigma_r real(kind=pReal), intent(in) :: A real(kind=pReal), intent(in) :: incubation real(kind=pReal), intent(in) :: Q_stress real(kind=pReal), intent(in) :: n real(kind=pReal), intent(inout), dimension(:), allocatable :: diffusion_coefficient real(kind=pReal), intent(inout) :: dt real(kind=pReal), intent(in) :: dt_max real(kind=pReal), intent(in) :: total_time real(kind=pReal), intent(inout), dimension(:), allocatable :: growth_rate_array real(kind=pReal), intent(inout), dimension(:), allocatable :: x_eq_interface character(len=100), intent(in) :: filesuffix character(len=100), intent(in) :: testfolder ! local variables","tags":"","loc":"module/kwn_model.html"},{"title":"KWN_io – KWN Deformation","text":"Uses KWN_data_types KWN_precision Contents Subroutines read_configuration output_results Subroutines public subroutine read_configuration (testfolder, prm, Temperature, shape_parameter, total_time, dt_max, time_record_step, sigma_r, A, Q_stress, n, incubation, stoechiometry, N_elements) !!!!!!!!! Arguments Type Intent Optional Attributes Name character(len=100), intent(out) :: testfolder type( tParameters ), intent(inout) :: prm real(kind=pReal), intent(out) :: Temperature real(kind=pReal), intent(out) :: shape_parameter real(kind=pReal), intent(out) :: total_time real(kind=pReal), intent(out) :: dt_max real(kind=pReal), intent(out) :: time_record_step real(kind=pReal), intent(out) :: sigma_r real(kind=pReal), intent(out) :: A real(kind=pReal), intent(out) :: Q_stress real(kind=pReal), intent(out) :: n real(kind=pReal), intent(out) :: incubation integer, intent(inout), dimension(:), allocatable :: stoechiometry integer, intent(in) :: N_elements public subroutine output_results (testfolder, filesuffix, stt, dst, diffusion_coefficient, c_thermal_vacancy, nucleation_rate, production_rate, annihilation_rate, dislocation_density, radius_crit, en) Arguments Type Intent Optional Attributes Name character(len=100), intent(in) :: testfolder character(len=100), intent(in) :: filesuffix type( tKwnpowerlawState ), intent(in) :: stt type( tKwnpowerlawMicrostructure ), intent(in) :: dst real(kind=pReal), intent(in), dimension(:), allocatable :: diffusion_coefficient real(kind=pReal), intent(in) :: c_thermal_vacancy real(kind=pReal), intent(in) :: nucleation_rate real(kind=pReal), intent(in) :: production_rate real(kind=pReal), intent(in) :: annihilation_rate real(kind=pReal), intent(in) :: dislocation_density real(kind=pReal), intent(in) :: radius_crit integer, intent(in) :: en","tags":"","loc":"module/kwn_io.html"},{"title":"KWN_model_functions – KWN Deformation","text":"Uses KWN_data_types KWN_parameters Contents Functions calculate_shear_modulus calculate_dislocation_density calculate_binary_alloy_critical_radius calculate_beta_star calculate_nucleation_rate Functions public function calculate_shear_modulus (Temperature) Arguments Type Intent Optional Attributes Name real(kind=pReal), intent(in) :: Temperature Return Value real(kind=pReal) public function calculate_dislocation_density (rho_0, rho_s, strain) Arguments Type Intent Optional Attributes Name real(kind=pReal), intent(in) :: rho_0 real(kind=pReal), intent(in) :: rho_s real(kind=pReal), intent(in) :: strain Return Value real(kind=pReal) public function calculate_binary_alloy_critical_radius (Temperature, dst, prm, en) Arguments Type Intent Optional Attributes Name real(kind=pReal), intent(in) :: Temperature type( tKwnpowerlawMicrostructure ), intent(in) :: dst type( tParameters ), intent(in) :: prm integer, intent(in) :: en Return Value real(kind=pReal) public function calculate_beta_star (radius_crit, lattice_param, diffusion_coefficient, c_matrix, en) Function for calculating beta_star for binary or ternary mixtures. Arguments Type Intent Optional Attributes Name real(kind=pReal), intent(in) :: radius_crit real(kind=pReal), intent(in) :: lattice_param real(kind=pReal), intent(in), dimension(:), allocatable :: diffusion_coefficient real(kind=pReal), intent(in), dimension(:,:), allocatable :: c_matrix integer, intent(in) :: en Return Value real(kind=pReal) public function calculate_nucleation_rate (nucleation_site_density, zeldovich_factor, beta_star, gamma_coherent, radius_crit, Temperature, incubation_time, time, en) Arguments Type Intent Optional Attributes Name real(kind=pReal), intent(in) :: nucleation_site_density real(kind=pReal), intent(in) :: zeldovich_factor real(kind=pReal), intent(in) :: beta_star real(kind=pReal), intent(in) :: gamma_coherent real(kind=pReal), intent(in) :: radius_crit real(kind=pReal), intent(in) :: Temperature real(kind=pReal), intent(in) :: incubation_time real(kind=pReal), intent(in), dimension(:), allocatable :: time integer, intent(in) :: en Return Value real(kind=pReal)","tags":"","loc":"module/kwn_model_functions.html"},{"title":"KWN_parameters – KWN Deformation","text":"Uses KWN_precision Contents Variables kB R PI na ev_to_Jat Variables Type Visibility Attributes Name Initial real(kind=pReal), public, parameter :: kB = 1.38064852e-23_pReal real(kind=pReal), public, parameter :: R = 8.3145_pReal real(kind=pReal), public, parameter :: PI = 3.14159265359_pReal real(kind=pReal), public, parameter :: na = 6.02214076e23_pReal real, public, parameter :: ev_to_Jat = 1.602176634e-19","tags":"","loc":"module/kwn_parameters.html"},{"title":"KWN_model_routines – KWN Deformation","text":"Uses KWN_data_types KWN_model_functions KWN_parameters Contents Subroutines set_initial_timestep_constants update_precipate_properties interface_composition growth_precipitate Subroutines public subroutine set_initial_timestep_constants (prm, stt, dot, Temperature, sigma_r, A, Q_stress, n, dt, en, diffusion_coefficient, c_thermal_vacancy, dislocation_density, production_rate, annihilation_rate) Arguments Type Intent Optional Attributes Name type( tParameters ), intent(in) :: prm type( tKwnpowerlawState ), intent(inout) :: stt type( tKwnpowerlawState ), intent(inout) :: dot real(kind=pReal), intent(in) :: Temperature real(kind=pReal), intent(in) :: sigma_r real(kind=pReal), intent(in) :: A real(kind=pReal), intent(in) :: Q_stress real(kind=pReal), intent(in) :: n real(kind=pReal), intent(in) :: dt integer, intent(in) :: en real(kind=pReal), intent(out), dimension(:), allocatable :: diffusion_coefficient real(kind=pReal), intent(out) :: c_thermal_vacancy real(kind=pReal), intent(out) :: dislocation_density real(kind=pReal), intent(out) :: production_rate real(kind=pReal), intent(out) :: annihilation_rate public subroutine update_precipate_properties (prm, dst, stt, en) Arguments Type Intent Optional Attributes Name type( tParameters ), intent(in) :: prm type( tKwnpowerlawMicrostructure ), intent(inout) :: dst type( tKwnpowerlawState ), intent(in) :: stt integer, intent(in) :: en public subroutine interface_composition (Temperature, N_elements, N_steps, stoechiometry, c_matrix, ceq_matrix, atomic_volume, na, molar_volume, ceq_precipitate, bins, gamma_coherent, R, x_eq_interface, diffusion_coefficient, volume_fraction, misfit_energy) Arguments Type Intent Optional Attributes Name real(kind=pReal), intent(in) :: Temperature integer, intent(in) :: N_elements integer, intent(in) :: N_steps integer, intent(in), dimension(N_elements+1) :: stoechiometry real(kind=pReal), intent(in), dimension(N_elements) :: c_matrix real(kind=pReal), intent(in), dimension(N_elements) :: ceq_matrix real(kind=pReal), intent(in) :: atomic_volume real(kind=pReal), intent(in) :: na real(kind=pReal), intent(in) :: molar_volume real(kind=pReal), intent(in), dimension(N_elements) :: ceq_precipitate real(kind=pReal), intent(in), dimension(0:N_steps) :: bins real(kind=pReal), intent(in) :: gamma_coherent real(kind=pReal), intent(in) :: R real(kind=pReal), intent(inout), dimension(0:N_steps) :: x_eq_interface real(kind=pReal), intent(in), dimension(N_elements) :: diffusion_coefficient real(kind=pReal), intent(in) :: volume_fraction real(kind=pReal), intent(in) :: misfit_energy public subroutine growth_precipitate (N_elements, N_Steps, bins, interface_c, x_eq_interface, atomic_volume, na, molar_volume, ceq_precipitate, precipitate_density, dot_precipitate_density, nucleation_rate, diffusion_coefficient, c_matrix, growth_rate_array, radius_crit) Arguments Type Intent Optional Attributes Name integer, intent(in) :: N_elements integer, intent(in) :: N_Steps real(kind=pReal), intent(in), dimension(0:N_steps) :: bins real(kind=pReal) :: interface_c real(kind=pReal), intent(in), dimension(0:N_steps) :: x_eq_interface real(kind=pReal), intent(in) :: atomic_volume real(kind=pReal), intent(in) :: na real(kind=pReal), intent(in) :: molar_volume real(kind=pReal), intent(in), dimension(N_elements) :: ceq_precipitate real(kind=pReal), intent(in), dimension(N_steps) :: precipitate_density real(kind=pReal), intent(inout), dimension(N_steps) :: dot_precipitate_density real(kind=pReal), intent(in) :: nucleation_rate real(kind=pReal), intent(in), dimension(N_elements) :: diffusion_coefficient real(kind=pReal), intent(in), dimension(N_elements) :: c_matrix real(kind=pReal), intent(inout), dimension(0:N_steps) :: growth_rate_array real(kind=pReal), intent(inout) :: radius_crit","tags":"","loc":"module/kwn_model_routines.html"},{"title":"KWN_data_types – KWN Deformation","text":"Uses KWN_precision Contents Derived Types tParameters tKwnpowerlawState tKwnpowerlawMicrostructure Derived Types type, public :: tParameters Components Type Visibility Attributes Name Initial integer, public :: kwn_nSteps real(kind=pReal), public :: kwn_stepsize real(kind=pReal), public :: kwn_step0 real(kind=pReal), public :: lattice_param real(kind=pReal), public :: atomic_volume real(kind=pReal), public :: molar_volume real(kind=pReal), public :: misfit_energy real(kind=pReal), public :: gamma_coherent real(kind=pReal), public :: vacancy_generation real(kind=pReal), public :: vacancy_sink_spacing real(kind=pReal), public :: vacancy_energy real(kind=pReal), public :: vacancy_migration_energy real(kind=pReal), public :: vacancy_diffusion0 real(kind=pReal), public :: mean_radius_initial real(kind=pReal), public :: standard_deviation real(kind=pReal), public :: volume_fraction_initial real(kind=pReal), public :: rho_0 real(kind=pReal), public :: rho_s real(kind=pReal), public :: strain_rate real(kind=pReal), public :: dislocation_arrangement real(kind=pReal), public :: burgers real(kind=pReal), public :: jog_formation_energy real(kind=pReal), public :: q_dislocation real(kind=pReal), public :: solute_strength real(kind=pReal), public, dimension(:), allocatable :: c0_matrix real(kind=pReal), public, dimension(:), allocatable :: ceq_matrix real(kind=pReal), public, dimension(:), allocatable :: ceq_precipitate real(kind=pReal), public, dimension(:), allocatable :: diffusion0 real(kind=pReal), public, dimension(:), allocatable :: migration_energy real(kind=pReal), public, dimension(:), allocatable :: bins character(len=15), public, allocatable, dimension(:) :: output type, public :: tKwnpowerlawState Components Type Visibility Attributes Name Initial real(kind=pReal), public, pointer, dimension(:,:) :: precipitate_density real(kind=pReal), public, dimension(  :), allocatable :: c_vacancy real(kind=pReal), public, dimension(  :), allocatable :: time type, public :: tKwnpowerlawMicrostructure Components Type Visibility Attributes Name Initial real(kind=pReal), public, dimension(:), allocatable :: total_precipitate_density real(kind=pReal), public, dimension(:), allocatable :: avg_precipitate_radius real(kind=pReal), public, dimension(:), allocatable :: precipitate_volume_frac real(kind=pReal), public, dimension(:,:), allocatable :: c_matrix","tags":"","loc":"module/kwn_data_types.html"},{"title":"KWN_precision – KWN Deformation","text":"Contents Variables pReal Variables Type Visibility Attributes Name Initial integer, public, parameter :: pReal = selected_real_kind(25)","tags":"","loc":"module/kwn_precision.html"},{"title":"KWN_initialise – KWN Deformation","text":"Uses KWN_model_functions KWN_model_routines KWN_parameters KWN_data_types KWN_io Contents Subroutines initialise_model_state initialise_outputs Subroutines public subroutine initialise_model_state (prm, dot, stt, dst, Nmembers, N_elements, en, stoechiometry, normalized_distribution_function, Temperature, radius_crit, interface_c, time_record_step, c_thermal_vacancy, shape_parameter, sigma_r, A, incubation, Q_stress, n, diffusion_coefficient, dt, dt_max, total_time, growth_rate_array, x_eq_interface, filesuffix, testfolder) ! read the configuration file, using data arrays allocated above\n! some conversions\n initialise the bins for the size distribution Arguments Type Intent Optional Attributes Name type( tParameters ), intent(out) :: prm type( tKwnpowerlawState ), intent(out) :: dot type( tKwnpowerlawState ), intent(out) :: stt type( tKwnpowerlawMicrostructure ), intent(out) :: dst integer, intent(out) :: Nmembers integer, intent(out) :: N_elements integer, intent(out) :: en integer, intent(out), dimension(:), allocatable :: stoechiometry real(kind=pReal), intent(out), dimension(:,:), allocatable :: normalized_distribution_function real(kind=pReal), intent(out) :: Temperature real(kind=pReal), intent(out) :: radius_crit real(kind=pReal), intent(out) :: interface_c real(kind=pReal), intent(out) :: time_record_step real(kind=pReal), intent(out) :: c_thermal_vacancy real(kind=pReal), intent(out) :: shape_parameter real(kind=pReal), intent(out) :: sigma_r real(kind=pReal), intent(out) :: A real(kind=pReal), intent(out) :: incubation real(kind=pReal), intent(out) :: Q_stress real(kind=pReal), intent(out) :: n real(kind=pReal), intent(out), dimension(:), allocatable :: diffusion_coefficient real(kind=pReal), intent(out) :: dt real(kind=pReal), intent(out) :: dt_max real(kind=pReal), intent(out) :: total_time real(kind=pReal), intent(out), dimension(:), allocatable :: growth_rate_array real(kind=pReal), intent(out), dimension(:), allocatable :: x_eq_interface character(len=100), intent(out) :: filesuffix character(len=100), intent(out) :: testfolder public subroutine initialise_outputs (testfolder, filesuffix, prm, stt, dst, nucleation_rate, radius_crit, shape_parameter, Temperature, dt, dt_max, growth_rate_array, mean_particle_strength, Q_stress, time_record_step, total_time, x_eq_interface, en) Arguments Type Intent Optional Attributes Name character(len=100), intent(in) :: testfolder character(len=100), intent(in) :: filesuffix type( tParameters ), intent(in) :: prm type( tKwnpowerlawState ), intent(in) :: stt type( tKwnpowerlawMicrostructure ), intent(in) :: dst real(kind=pReal), intent(in) :: nucleation_rate real(kind=pReal), intent(in) :: radius_crit real(kind=pReal), intent(in) :: shape_parameter real(kind=pReal), intent(in) :: Temperature real(kind=pReal), intent(in) :: dt real(kind=pReal), intent(in) :: dt_max real(kind=pReal), intent(in), dimension(:), allocatable :: growth_rate_array real(kind=pReal), intent(in) :: mean_particle_strength real(kind=pReal), intent(in) :: Q_stress real(kind=pReal), intent(in) :: time_record_step real(kind=pReal), intent(in) :: total_time real(kind=pReal), intent(in), dimension(:), allocatable :: x_eq_interface integer, intent(in) :: en","tags":"","loc":"module/kwn_initialise.html"},{"title":"KWN_model.f90 – KWN Deformation","text":"Contents Modules KWN_model Source Code KWN_model.f90 Source Code module KWN_model use KWN_parameters use KWN_data_types , only : tParameters , tKwnpowerlawState , tKwnpowerlawMicrostructure use KWN_model_routines , only : interface_composition , growth_precipitate , & update_precipate_properties , set_initial_timestep_constants use KWN_model_functions , only : calculate_binary_alloy_critical_radius , & calculate_beta_star , calculate_nucleation_rate use KWN_io , only : output_results contains subroutine run_model ( prm , dot , stt , dst , & Nmembers , N_elements , en , & stoechiometry , normalized_distribution_function , & Temperature , radius_crit , interface_c , time_record_step , & c_thermal_vacancy , shape_parameter , sigma_r , A , & incubation , Q_stress , n , diffusion_coefficient , & dt , dt_max , total_time , growth_rate_array , & x_eq_interface , & filesuffix , testfolder & ) implicit none type ( tParameters ), intent ( inout ) :: prm type ( tKwnpowerlawState ), intent ( inout ) :: dot , stt type ( tKwnpowerlawMicrostructure ), intent ( inout ) :: dst integer , intent ( in ) :: & Nmembers , & N_elements , & ! number of different elements in the precipitate en integer , dimension (:), allocatable , intent ( in ) :: stoechiometry !precipitate stoechiometry in the following order : Mg Zn Al real ( pReal ), dimension (:,:), allocatable , intent ( in ) :: & normalized_distribution_function !normalised distribution for the precipitate size real ( pReal ), dimension (:), allocatable , intent ( inout ) :: & growth_rate_array , & !array that contains the precipitate growth rate of each bin x_eq_interface !array with equilibrium concentrations at the interface between matrix and precipitates of each bin real ( pReal ), intent ( in ) :: & interface_c , & !interface composition between matrix and a precipitate time_record_step , & ! time step for the output [s] shape_parameter , & !shape parameter in the log normal distribution of the precipitates - ref [4] sigma_r , & ! constant in the sinepowerlaw for flow stress [MPa] A , & ! constant in the sinepowerlaw for flow stress  [/s] incubation , & ! incubation prefactor either 0 or 1 Q_stress , & ! activation energy in the sinepowerlaw for flow stress [J/mol] n ! stress exponent in the sinepower law for flow stress real ( pReal ), intent ( inout ) :: & Temperature , & !temperature in K c_thermal_vacancy , & ! concentration in thermal vacancies radius_crit !critical radius, [m] real ( pReal ), dimension (:), allocatable , intent ( inout ) :: & diffusion_coefficient ! diffusion coefficient for Mg and Zn real ( pReal ), intent ( in ) :: & dt_max , & ! max time step for integration [s] total_time ![s] real ( pReal ), intent ( inout ) :: & dt !time step for integration [s] character * 100 , intent ( in ) :: filesuffix !the file suffix contains the temperature and strain rate used for the simulation character * 100 , intent ( in ) :: testfolder !folder where the input file is !!! local variables integer :: bin , k , i real ( pReal ) :: & deltaGv , & ! chemical driving force [J/mol] interface_energy , & ![J/m&#94;2] nucleation_site_density , & !nucleation density [pr/m&#94;3] zeldovich_factor , & !Zeldovich factor beta_star , & ! in the nucleation rate expression incubation_time , & ! in the nucleation rate expression nucleation_rate ,& ! part/m&#94;3/s radiusL , radiusR , radiusC , & ! used for the calculation of the growth rate in the different bins growth_rate , flux , & ! growth rate and flux between different bins for the precipitates time_record , & ! used to record the outputs in files production_rate , & ! production rate for excess vacancies annihilation_rate , & !annihilation rate for excess vacancies dislocation_density ![/m&#94;2] real ( pReal ), dimension (:,:), allocatable :: & results !variable to store the results ! the 'temp' variables are to store the previous step and adapt the time step at each iteration real ( pReal ), dimension (:), allocatable :: & temp_c_matrix , & temp_x_eq_interface , & temp_x_eq_matrix , & temp_precipitate_density ,& temp_dot_precipitate_density , & k1 , k2 , k3 , k4 ! variables used for Runge Kutta integration real ( pReal ) :: & temp_total_precipitate_density , & temp_avg_precipitate_radius , & temp_precipitate_volume_frac , & temp_radius_crit , & temp_c_vacancy , & temp_diffusion_coefficient , & temp_dislocation_density , & dt_temp , & Temperature_temp , & h !used for Runge Kutta integration character * 100 :: filename !name of the gile where the outputs will be written INTEGER :: status ! I/O status ! allocate arrays for Runga Kutta and temporary work allocate ( k1 ( prm % kwn_nSteps ), source = 0.0_pReal ) ! Runge Kutta allocate ( k2 ( prm % kwn_nSteps ), source = 0.0_pReal ) ! allocate ( k3 ( prm % kwn_nSteps ), source = 0.0_pReal ) allocate ( k4 ( prm % kwn_nSteps ), source = 0.0_pReal ) allocate ( temp_x_eq_interface ( 0 : prm % kwn_nSteps ), source = 0.0_pReal ) allocate ( temp_precipitate_density ( prm % kwn_nSteps ), source = 0.0_pReal ) allocate ( temp_dot_precipitate_density ( prm % kwn_nSteps ), source = 0.0_pReal ) allocate ( temp_c_matrix ( N_elements ), source = 0.0_pReal ) allocate ( temp_x_eq_matrix ( N_elements ), source = 0.0_pReal ) allocate ( results ( 1 , 8 )) ! the results are stored in this array !the following are used to store the outputs from the previous iteration temp_diffusion_coefficient = diffusion_coefficient ( en ) temp_total_precipitate_density = dst % total_precipitate_density ( en ) temp_avg_precipitate_radius = dst % avg_precipitate_radius ( en ) temp_precipitate_volume_frac = dst % precipitate_volume_frac ( en ) temp_c_matrix (:) = dst % c_matrix (:, en ) temp_precipitate_density = stt % precipitate_density (:, en ) temp_dot_precipitate_density = dot % precipitate_density (:, en ) temp_radius_crit = radius_crit temp_x_eq_matrix = prm % ceq_matrix temp_x_eq_interface = x_eq_interface temp_c_vacancy = stt % c_vacancy ( en ) temp_dislocation_density = prm % rho_0 Temperature_temp = Temperature stt % time ( en ) = 0.0_pReal ! time_record is used to record the results in textfiles time_record = - dt nucleation_rate = 0.0_pReal h = dt k = 0 loop_time : do while ( stt % time ( en ). LE . total_time ) k = k + 1 print * , \"dt:\" , dt print * , 'Time:' , stt % time ( en ) print * , 'Temperature' , Temperature print * , 'Mean radius : ' , dst % avg_precipitate_radius ( en ) * 1e9 , 'nm' call set_initial_timestep_constants ( prm , stt , dot , Temperature , sigma_r , A , Q_stress , n , dt , en , & diffusion_coefficient , c_thermal_vacancy , dislocation_density , & production_rate , annihilation_rate ) ! calculate nucleation rate nucleation_site_density = sum ( dst % c_matrix (:, en )) / prm % atomic_volume zeldovich_factor = prm % atomic_volume * sqrt ( prm % gamma_coherent / ( kB * Temperature ) ) & / ( 2.0_pReal * PI * radius_crit ** 2.0 ) ! expression of beta star for all alloys beta_star = calculate_beta_star ( radius_crit , prm % lattice_param , & diffusion_coefficient , dst % c_matrix , en ) !TODO: Have users set N_elements, and test for N_elements==1 here to define a binary alloy !TODO: Doug: I think this should be calculated before beta_star in each timestep, !            in the setting of initial timestep constants !            (it will converge towards the same answer either way, but with slightly !             different strain rates early in the simulation) ! calculate critical radius in the case of a binary alloy if ( dst % c_matrix ( 2 , en ) == 0 ) then radius_crit = calculate_binary_alloy_critical_radius ( Temperature , dst , prm , en ) end if incubation_time = incubation * 2.0 & / ( PI * zeldovich_factor ** 2.0 * beta_star ) print * , 'Incubation time' , incubation_time if ( stt % time ( en ) > 0.0_pReal ) then nucleation_rate = calculate_nucleation_rate ( nucleation_site_density , zeldovich_factor , beta_star , & prm % gamma_coherent , radius_crit , Temperature , incubation_time , & stt % time , en ) print * , 'nucleation rate' , nucleation_rate * 1e-6 , '/cm&#94;3' else nucleation_rate = 0.0_pReal endif dot % precipitate_density = 0.0 * dot % precipitate_density !calculate the precipitate growth in all bins dot%precipitate_density call growth_precipitate ( N_elements , prm % kwn_nSteps , prm % bins , interface_c , & x_eq_interface , prm % atomic_volume , na , prm % molar_volume , prm % ceq_precipitate , & stt % precipitate_density , dot % precipitate_density (:, en ), nucleation_rate , & diffusion_coefficient , dst % c_matrix (:, en ), growth_rate_array , radius_crit ) ! empty the first bin to avoid precipitate accumulation !dot%precipitate_density(0,en) = 0.0_pReal dot % precipitate_density ( 1 , en ) = 0.0_pReal !stt%precipitate_density(0,en) = 0.0_pReal stt % precipitate_density ( 1 , en ) = 0.0_pReal ! Runge Kutta 4th order to calculate the derivatives ! https://en.wikipedia.org/wiki/Runge–Kutta_methods ! Runge Kutta k2 calculation ! repeat the calculations above for t = t+dt/2 h = dt k1 = dot % precipitate_density (:, en ) stt % time ( en ) = stt % time ( en ) + h / 2.0 stt % precipitate_density (:, en ) = temp_precipitate_density + h / 2.0 * k1 call growth_precipitate ( N_elements , prm % kwn_nSteps , prm % bins , interface_c ,& x_eq_interface , prm % atomic_volume , na , prm % molar_volume , prm % ceq_precipitate , & stt % precipitate_density , dot % precipitate_density (:, en ), nucleation_rate ,& diffusion_coefficient , dst % c_matrix (:, en ), growth_rate_array , radius_crit ) nucleation_site_density = sum ( dst % c_matrix (:, en )) / prm % atomic_volume zeldovich_factor = prm % atomic_volume * sqrt ( prm % gamma_coherent / ( kB * Temperature ) ) & / ( 2.0_pReal * PI * radius_crit ** 2.0 ) ! expression of beta star for all alloys beta_star = calculate_beta_star ( radius_crit , prm % lattice_param , & diffusion_coefficient , dst % c_matrix , en ) incubation_time = incubation * 2.0 / ( PI * zeldovich_factor ** 2.0 * beta_star ) if ( stt % time ( en ) > 0.0_pReal ) then nucleation_rate = calculate_nucleation_rate ( nucleation_site_density , zeldovich_factor , beta_star , & prm % gamma_coherent , radius_crit , Temperature , incubation_time , & stt % time , en ) else nucleation_rate = 0.0_pReal endif dot % precipitate_density = 0.0 * dot % precipitate_density call growth_precipitate ( N_elements , prm % kwn_nSteps , prm % bins , interface_c ,& x_eq_interface , prm % atomic_volume , na , prm % molar_volume , prm % ceq_precipitate , & stt % precipitate_density , dot % precipitate_density (:, en ), nucleation_rate , diffusion_coefficient , & dst % c_matrix (:, en ), growth_rate_array , radius_crit ) !dot%precipitate_density(0,en) = 0.0_pReal dot % precipitate_density ( 1 , en ) = 0.0_pReal !stt%precipitate_density(0,en) = 0.0_pReal stt % precipitate_density ( 1 , en ) = 0.0_pReal k2 = dot % precipitate_density (:, en ) ! Runge Kutta k3 calculation stt % precipitate_density (:, en ) = temp_precipitate_density + h / 2.0 * k2 dot % precipitate_density = 0.0 * dot % precipitate_density call growth_precipitate ( N_elements , prm % kwn_nSteps , prm % bins , interface_c , & x_eq_interface , prm % atomic_volume , na , prm % molar_volume , prm % ceq_precipitate , & stt % precipitate_density , dot % precipitate_density (:, en ), nucleation_rate , & diffusion_coefficient , dst % c_matrix (:, en ), growth_rate_array , radius_crit ) ! empty the first bin to avoid precipitate accumulation !dot%precipitate_density(0,en) = 0.0_pReal dot % precipitate_density ( 1 , en ) = 0.0_pReal !stt%precipitate_density(0,en) = 0.0_pReal stt % precipitate_density ( 1 , en ) = 0.0_pReal k3 = dot % precipitate_density (:, en ) ! Runge Kutta k4 calculation stt % precipitate_density (:, en ) = temp_precipitate_density + h * k3 stt % time ( en ) = stt % time ( en ) + h / 2.0 nucleation_site_density = sum ( dst % c_matrix (:, en )) / prm % atomic_volume zeldovich_factor = prm % atomic_volume * sqrt ( prm % gamma_coherent / ( kB * Temperature )) & / ( 2.0_pReal * PI * radius_crit ** 2.0 ) ! expression of beta star for all alloys beta_star = calculate_beta_star ( radius_crit , prm % lattice_param , & diffusion_coefficient , dst % c_matrix , en ) incubation_time = incubation * 2.0 / ( PI * zeldovich_factor ** 2 * beta_star ) if ( stt % time ( en ) > 0.0_pReal ) then nucleation_rate = calculate_nucleation_rate ( nucleation_site_density , zeldovich_factor , beta_star , & prm % gamma_coherent , radius_crit , Temperature , incubation_time , & stt % time , en ) else nucleation_rate = 0.0_pReal endif dot % precipitate_density = 0.0 * dot % precipitate_density !calculate precipitate growth rate in all bins call growth_precipitate ( N_elements , prm % kwn_nSteps , prm % bins , interface_c , & x_eq_interface , prm % atomic_volume , na , prm % molar_volume , prm % ceq_precipitate , & stt % precipitate_density , dot % precipitate_density (:, en ), nucleation_rate , & diffusion_coefficient , dst % c_matrix (:, en ), growth_rate_array , radius_crit ) !dot%precipitate_density(0,en) = 0.0_pReal dot % precipitate_density ( 1 , en ) = 0.0_pReal !stt%precipitate_density(0,en) = 0.0_pReal stt % precipitate_density ( 1 , en ) = 0.0_pReal k4 = dot % precipitate_density (:, en ) !Runge Kutta, calculate precipitate density in all bins (/m&#94;4) stt % precipitate_density (:, en ) = temp_precipitate_density + h / 6.0 * ( k1 + 2.0 * k2 + 2.0 * k3 + k4 ) ! update precipate (dst) volume frac, density, avg radius, and matrix composition call update_precipate_properties ( prm , dst , stt , en ) ! print*, '' print * , 'Total precipitate density : ' , dst % total_precipitate_density * 1e-18 , '/micron&#94;3' print * , 'Precipitate volume fraction :' , dst % precipitate_volume_frac ( en ) print * , 'Solute concentration in the matrix' , dst % c_matrix ( 1 , en ) print * , 'Nucleation rate :part/micron&#94;3/s ' , nucleation_rate * 1.0e-18 print * , 'Critical Radius : ' , radius_crit * 1e9 , 'nm' ! Adapt time step so that the outputs do not vary to much between too time steps !if  either: !    - the precipitate distribution in one class/ the vacancy concentration / the concentration in the matrix becomes negative, ! or - at least one size of precipitates grow sufficiently fast to move from two size classes during one time step ! then go back to the previous step and decrease the time step if ( ( stt % c_vacancy ( en ) < 0.0_pReal ) & . OR . ( minval ( stt % precipitate_density (:, en )) < 0.0_pReal ) & . OR . ( minval ( dst % c_matrix (:, en )) < 0.0_pReal ) & . OR . any ( isnan ( stt % precipitate_density (:, en ))) & ) then ! go back one step before stt % time ( en ) = stt % time ( en ) - dt dst % total_precipitate_density ( en ) = temp_total_precipitate_density stt % precipitate_density (:, en ) = temp_precipitate_density (:) dot % precipitate_density (:, en ) = temp_dot_precipitate_density (:) dst % avg_precipitate_radius ( en ) = temp_avg_precipitate_radius dst % precipitate_volume_frac ( en ) = temp_precipitate_volume_frac dst % c_matrix (:, en ) = temp_c_matrix !stt%c_vacancy(en) = temp_c_vacancy !dislocation_density = temp_dislocation_density Temperature = Temperature_temp !radius_crit = temp_radius_crit prm % ceq_matrix = temp_x_eq_matrix x_eq_interface = temp_x_eq_interface !diffusion_coefficient(1) = temp_diffusion_coefficient !decrease time step by a factor arbitrarily chose (2) dt = 0.5 * dt else !set the time step so that a precipitate cannot grow from more than the space between two adjacent classes !not necessary to adapt the time step to the growth rate if there is no precipitate if ( dst % total_precipitate_density ( en ) > 1.0_pReal ) then dt = min ( dt_max , & ( prm % bins ( 1 ) - prm % bins ( 0 )) / maxval ( abs ( growth_rate_array )) & ) print * , 'dt growth rate' , ( prm % bins ( 1 ) - prm % bins ( 0 )) / maxval ( abs ( growth_rate_array )) else dt = min ( dt_max , dt * 1.2 ) !increase slightly the time step by an arbitrary factor as long as there are no precipitates endif ! store the new values of the outputs in the temporary variables temp_dot_precipitate_density = dot % precipitate_density (:, en ) temp_total_precipitate_density = dst % total_precipitate_density ( en ) temp_precipitate_density = stt % precipitate_density (:, en ) temp_avg_precipitate_radius = dst % avg_precipitate_radius ( en ) temp_precipitate_volume_frac = dst % precipitate_volume_frac ( en ) temp_c_matrix = dst % c_matrix (:, en ) !temp_radius_crit = radius_crit temp_x_eq_matrix = prm % ceq_matrix temp_x_eq_interface = x_eq_interface !temp_c_vacancy = stt%c_vacancy(en) !temp_dislocation_density = dislocation_density Temperature_temp = Temperature !temp_diffusion_coefficient = diffusion_coefficient(1) if ( time_record < stt % time ( en )) then !record the outputs every 'time_record' seconds call output_results ( testfolder , filesuffix , stt , dst , diffusion_coefficient , c_thermal_vacancy , & nucleation_rate , production_rate , annihilation_rate , dislocation_density , & radius_crit , en ) ! next time for which the outputs should be written if ( time_record_step > 0 ) then !Save data linearly time_record = time_record + time_record_step else !save data logarithimically time_record = time_record + 10 ** ( INT ( LOG10 ( stt % time ( en ))) - 1 ) endif endif endif end do loop_time end subroutine run_model end module KWN_model","tags":"","loc":"sourcefile/kwn_model.f90.html"},{"title":"KWN_io.f90 – KWN Deformation","text":"Contents Modules KWN_io Source Code KWN_io.f90 Source Code module KWN_io use KWN_precision use KWN_data_types , only : tParameters , tKwnpowerlawState , tKwnpowerlawMicrostructure contains subroutine read_configuration ( & testfolder , & prm , & Temperature , & shape_parameter , & ! the initial distribution is defined by mean radius, volume fraction and shape parameter of a log normal distribution - see e.g. ref [4] total_time , & ![s] dt_max , & ![s] time_record_step , & ![s] sigma_r , & ![MPa] - sinepower law for stress A , & ![/s] - sinepower law for stress Q_stress , & ![J/mol] - activation energy in flow stress law n , & !exponent in sinepower law for stress incubation , & !incubation prefactor, either 0 or 1) stoechiometry , & N_elements & ) implicit none character * 100 , intent ( out ) :: testfolder type ( tParameters ), intent ( inout ) :: prm integer , dimension (:), allocatable , intent ( inout ) :: stoechiometry !precipitate stoechiometry in the following order : Mg Zn Al integer , intent ( in ) :: N_elements real ( pReal ), intent ( out ) :: & Temperature , & shape_parameter , & total_time , & dt_max , & time_record_step , & sigma_r , & A , & Q_stress , & n , & incubation ! local variables INTEGER :: status ! I/O status integer :: & kwn_nSteps ! discretization in r-space real ( pReal ) :: & kwn_stepsize , & ! discretization in r-space kwn_step0 ! minimum radius real ( pReal ) :: & lattice_param , & ! lattice parameter in meter atomic_volume , & ! atomic volume in meter&#94;3 molar_volume , & ! molar volume in m&#94;3/mol misfit_energy , & ! normalized precipitate misfit energy in J/m&#94;3 gamma_coherent , & ! coherent precipitate surface energy in J/m&#94;2 vacancy_generation , & ! vacancy generation rate coefficient vacancy_sink_spacing , & ! vacancy sink spacing vacancy_energy , & ! normalized vacancy formation energy (Q/kB) in 1/k vacancy_migration_energy , & ! solute migration energy in J/at vacancy_diffusion0 , & ! vacancy diffusivity in m&#94;2/s mean_radius_initial ,& ! average radius initial distribution in meters volume_fraction_initial , & ! initial total precipitate distribution rho_0 , & !initial dislocation density rho_s , & !saturation dislocation density strain_rate , & ! strain rate in /s dislocation_arrangement , & ! constant related to the dislocation density in the vacancy annihilation term, cf [1] burgers , & !matrice burgers vector jog_formation_energy , & ! formation energy for jogs q_dislocation ! activation energy for diffusion at dislocation (pipe diffusion) in J/at - not used yet but to be updated ! the following variables are allocatable to allow for precipitates with multiple elements (only situations with 2 elements are used here) real ( pReal ), dimension (:), allocatable :: & c0_matrix , & ! initial matrix solute composition in mol fraction : [Mg, Zn] ceq_matrix , & ! equilibrium matrix composition for a flat interface (infinite precipitate radius) in mol fraction : [Mg, Zn] diffusion0 , & ! solute diffusivity in m&#94;2/s : [Mg, Zn] - in the present version of the code - the diffusion coefficient is taken as identical for both solute and equal to the slowest diffuser (Mg) migration_energy !  solute migration energy in J/at ! define namelist for reading model configuration namelist / config / kwn_nSteps , kwn_stepsize , kwn_step0 , lattice_param , atomic_volume , & molar_volume , misfit_energy , gamma_coherent , vacancy_generation , & vacancy_sink_spacing , vacancy_energy , vacancy_migration_energy , & vacancy_diffusion0 , mean_radius_initial , volume_fraction_initial , & rho_0 , rho_s , strain_rate , dislocation_arrangement , burgers , & jog_formation_energy , q_dislocation , c0_matrix , ceq_matrix , & diffusion0 , migration_energy , & testfolder , Temperature , stoechiometry , shape_parameter , & total_time , dt_max , time_record_step , sigma_r , A , Q_stress , n , & incubation ! ensure allocatable arrays are allocated to same size as prm arrays allocate ( migration_energy ( N_elements ), source = 0.0_pReal ) allocate ( diffusion0 ( N_elements ), source = 0.0_pReal ) allocate ( c0_matrix ( N_elements ), source = 0.0_pReal ) allocate ( ceq_matrix ( N_elements ), source = 0.0_pReal ) ! Read the inputs from the input.namelist file !!!!!!!!!!! OPEN ( UNIT = 1 , FILE = 'namelist.input' , STATUS = 'OLD' , ACTION = 'READ' , IOSTAT = status ) print * , status read ( 1 , config ) CLOSE ( 1 ) prm % kwn_nSteps = kwn_nSteps prm % kwn_stepsize = kwn_stepsize prm % kwn_step0 = kwn_step0 prm % lattice_param = lattice_param prm % atomic_volume = atomic_volume prm % molar_volume = molar_volume prm % misfit_energy = misfit_energy prm % gamma_coherent = gamma_coherent prm % vacancy_generation = vacancy_generation prm % vacancy_sink_spacing = vacancy_sink_spacing prm % vacancy_energy = vacancy_energy prm % vacancy_migration_energy = vacancy_migration_energy prm % vacancy_diffusion0 = vacancy_diffusion0 prm % mean_radius_initial = mean_radius_initial prm % volume_fraction_initial = volume_fraction_initial prm % rho_0 = rho_0 prm % rho_s = rho_s prm % strain_rate = strain_rate prm % dislocation_arrangement = dislocation_arrangement prm % burgers = burgers prm % jog_formation_energy = jog_formation_energy prm % q_dislocation = q_dislocation prm % c0_matrix = c0_matrix prm % ceq_matrix = ceq_matrix prm % diffusion0 = diffusion0 prm % migration_energy = migration_energy ! Write the namelist to our test folder, for record keeping open ( unit = 1 , file = trim ( testfolder ) // '/namelist.output' , status = 'replace' , iostat = status ) print * , status write ( 1 , config ) close ( 1 ) end subroutine read_configuration subroutine output_results ( testfolder , filesuffix , stt , dst , diffusion_coefficient , c_thermal_vacancy , & nucleation_rate , production_rate , annihilation_rate , dislocation_density , & radius_crit , en ) type ( tKwnpowerlawState ), intent ( in ) :: stt type ( tKwnpowerlawMicrostructure ), intent ( in ) :: dst real ( pReal ), dimension (:), allocatable , intent ( in ) :: & diffusion_coefficient ! diffusion coefficient for Mg and Zn real ( pReal ), intent ( in ) :: & c_thermal_vacancy , & ! concentration in thermal vacancies production_rate , & ! production rate for excess vacancies annihilation_rate , & !annihilation rate for excess vacancies nucleation_rate , & ! part/m&#94;3/s dislocation_density , & ![/m&#94;2] radius_crit !critical radius, [m] integer , intent ( in ) :: en character * 100 , intent ( in ) :: filesuffix !the file suffix contains the temperature and strain rate used for the simulation character * 100 , intent ( in ) :: testfolder !folder where the input file is ! local variables real ( pReal ), dimension (:,:), allocatable :: & results !variable to store the results character * 100 :: filename !name of the gile where the outputs will be written integer :: bin , i allocate ( results ( 1 , 8 )) ! the results are stored in this array ! write outputs in textfiles results ( 1 , 1 ) = stt % time ( en ) results ( 1 , 2 ) = dst % avg_precipitate_radius ( en ) * 1.0e9 results ( 1 , 3 ) = dst % total_precipitate_density ( en ) * 1.0e-18 if ( results ( 1 , 3 ) < 1.0e-30_pReal ) then results ( 1 , 3 ) = 0.0 endif results ( 1 , 4 ) = dst % precipitate_volume_frac ( en ) if ( results ( 1 , 4 ) < 1.0e-30_pReal ) then results ( 1 , 4 ) = 0.0 endif results ( 1 , 7 : 8 ) = dst % c_matrix (:, en ) results ( 1 , 6 ) = nucleation_rate * 1.0e-18 if ( results ( 1 , 6 ) < 1.0e-30_pReal ) then results ( 1 , 6 ) = 0.0 endif results ( 1 , 5 ) = radius_crit * 1.0e9 filename = 'results/kinetics_data_' filename = trim ( testfolder ) // trim ( filename ) // trim ( filesuffix ) open ( 1 , file = filename , ACTION = \"write\" , position = \"append\" ) WRITE ( 1 , 13 ) ( results ( 1 , i ), i = 1 , 8 ) 13 FORMAT ( F40 . 6 , F40 . 6 , E40 . 6 , E40 . 6 , E40 . 6 , E40 . 6 , 2E40 . 6 ) close ( 1 ) ! writes the current distribution filename = 'results/precipitation_distribution_' filename = trim ( testfolder ) // trim ( filename ) // trim ( filesuffix ) open ( 2 , file = filename , ACTION = \"write\" , STATUS = \"replace\" ) WRITE ( 2 , '(E40.15)' ) stt % time ( en ), stt % precipitate_density (:, en ) close ( 2 ) filename = 'results/diffusion_coefficient_' filename = trim ( testfolder ) // trim ( filename ) // trim ( filesuffix ) open ( 1 , file = filename , ACTION = \"write\" , position = \"append\" ) write ( 1 , 601 ) stt % time ( en ), diffusion_coefficient ( 1 ) close ( 1 ) filename = 'results/vacancies_' filename = trim ( testfolder ) // trim ( filename ) // trim ( filesuffix ) open ( 1 , file = filename , ACTION = \"write\" , position = \"append\" ) write ( 1 , 1001 ) stt % time ( en ), stt % c_vacancy ( en ) / c_thermal_vacancy , & production_rate / c_thermal_vacancy , annihilation_rate / c_thermal_vacancy close ( 1 ) filename = 'results/dislocation_density_' filename = trim ( testfolder ) // trim ( filename ) // trim ( filesuffix ) open ( 1 , file = filename , ACTION = \"write\" , position = \"append\" ) write ( 1 , 901 ) stt % time ( en ), dislocation_density close ( 1 ) 601 FORMAT ( 2E40 . 6 ) 901 FORMAT ( 3E40 . 6 ) 1001 FORMAT ( 4E40 . 6 ) end subroutine output_results end module KWN_io","tags":"","loc":"sourcefile/kwn_io.f90.html"},{"title":"KWN_model_functions.f90 – KWN Deformation","text":"Contents Modules KWN_model_functions Source Code KWN_model_functions.f90 Source Code module KWN_model_functions use KWN_parameters use KWN_data_types , only : tParameters , tKwnpowerlawMicrostructure contains function calculate_shear_modulus ( Temperature ) implicit none ! Calculate Shear Modulus after McLellan 1987 MPa real ( pReal ), intent ( in ) :: Temperature !temperature in K real ( pReal ) :: calculate_shear_modulus !shear modulus [Pa] calculate_shear_modulus = ( 2 7.0 & + ( 2 1.5 - 2 7.0 ) / ( 65 0.0 - 27 3.0 ) & * ( Temperature - 27 3.0 ) & ) * 1.0e9 end function calculate_shear_modulus function calculate_dislocation_density ( rho_0 , rho_s , strain ) implicit none !from Detemple 1995 Physical Review B - Condensed Matter and Materials Physics, 52(1), 125–133. real ( pReal ), intent ( in ) :: & rho_0 , & !initial dislocation density rho_s , & !saturation dislocation density strain !macroscopic strain real ( pReal ) :: calculate_dislocation_density calculate_dislocation_density = rho_s & * ( 1 & - ( sqrt ( rho_s ) - sqrt ( rho_0 )) & / sqrt ( rho_s ) & * exp ( ( - 1.0 / 2.0 ) * 86 * strain ) & ) ** 2 end function calculate_dislocation_density function calculate_binary_alloy_critical_radius ( Temperature , dst , prm , en ) implicit none ! calculate the critical radius for binary alloys real ( pReal ), intent ( in ) :: Temperature !temperature in K type ( tParameters ), intent ( in ) :: prm type ( tKwnpowerlawMicrostructure ), intent ( in ) :: dst integer , intent ( in ) :: en real ( pReal ) :: deltaGv real ( pReal ) :: calculate_binary_alloy_critical_radius ! SAM: Added method to calculate the  explicitly deltaGv = - R * Temperature & * log ( dst % c_matrix ( 1 , en ) / prm % ceq_matrix ( 1 ) ) & / prm % molar_volume & + prm % misfit_energy calculate_binary_alloy_critical_radius = - 2.0_pReal * prm % gamma_coherent / deltaGv end function calculate_binary_alloy_critical_radius function calculate_beta_star ( radius_crit , lattice_param , & diffusion_coefficient , c_matrix , en ) !! Function for calculating beta_star for binary or ternary mixtures. real ( pReal ), intent ( in ) :: radius_crit real ( pReal ), intent ( in ) :: lattice_param real ( pReal ), dimension (:), allocatable , intent ( in ) :: & diffusion_coefficient ! diffusion coefficient for Mg and Zn real ( pReal ), dimension (:,:), allocatable , intent ( in ) :: c_matrix integer , intent ( in ) :: en real ( pReal ) :: calculate_beta_star !TODO: Eventually the sizes of diffusion coefficient and c_matrix should be adjusted !      in the main code, so that there is not empty space in these when working with !      binary alloys. Once that happens we can use the ternary alloy solution for !      all calculations. ! expression of beta star for ternary alloys if ( c_matrix ( 2 , en ) > 0 ) then calculate_beta_star = 4.0_pReal * PI & * radius_crit ** 2.0 / ( lattice_param ** 4.0 ) & * 1 / ( sum ( 1 / ( diffusion_coefficient (:) * c_matrix (:, en )) ) ) ! expression of beta star for binary alloys else calculate_beta_star = 4.0_pReal * PI & * radius_crit ** 2.0 / ( lattice_param ** 4.0 ) & * 1 / ( ( 1 / ( diffusion_coefficient ( 1 ) * c_matrix ( 1 , en )) ) ) endif end function calculate_beta_star function calculate_nucleation_rate ( nucleation_site_density , zeldovich_factor , beta_star , & gamma_coherent , radius_crit , Temperature , incubation_time , & time , en ) real ( pReal ), intent ( in ) :: & nucleation_site_density , & !nucleation density [pr/m&#94;3] zeldovich_factor , & !Zeldovich factor beta_star , & ! in the nucleation rate expression gamma_coherent , & ! coherent precipitate surface energy in J/m&#94;2 radius_crit , & Temperature , & !temperature in K incubation_time ! in the nucleation rate expression real ( pReal ), dimension (:), allocatable , intent ( in ) :: time ! time [s] integer , intent ( in ) :: en real ( pReal ) :: calculate_nucleation_rate calculate_nucleation_rate = nucleation_site_density * zeldovich_factor * beta_star & * exp ( & - 4.0_pReal * PI * gamma_coherent * radius_crit ** 2.0 & / ( 3.0_pReal * kB * Temperature ) & - incubation_time / time ( en ) & ) end function calculate_nucleation_rate end module KWN_model_functions","tags":"","loc":"sourcefile/kwn_model_functions.f90.html"},{"title":"KWN_parameters.f90 – KWN Deformation","text":"Contents Modules KWN_parameters Source Code KWN_parameters.f90 Source Code module KWN_parameters use KWN_precision real ( pReal ), parameter :: & kB = 1.38064852e-23_pReal , & R = 8.3145_pReal , & PI = 3.14159265359_pReal , & na = 6.02214076e23_pReal real , parameter :: & ev_to_Jat = 1.602176634e-19 ! convert from ev to  J/at end module KWN_parameters","tags":"","loc":"sourcefile/kwn_parameters.f90.html"},{"title":"KWN_model_routines.f90 – KWN Deformation","text":"Contents Modules KWN_model_routines Source Code KWN_model_routines.f90 Source Code module KWN_model_routines use KWN_parameters use KWN_data_types , only : tParameters , tKwnpowerlawState , tKwnpowerlawMicrostructure use KWN_model_functions , only : calculate_shear_modulus , calculate_dislocation_density contains subroutine set_initial_timestep_constants ( prm , stt , dot , Temperature , sigma_r , A , Q_stress , n , dt , en , & diffusion_coefficient , c_thermal_vacancy , dislocation_density , & production_rate , annihilation_rate ) implicit none type ( tParameters ), intent ( in ) :: prm type ( tKwnpowerlawState ), intent ( inout ) :: dot , stt real ( pReal ), intent ( in ) :: & Temperature , & !temperature in K sigma_r , & ! constant in the sinepowerlaw for flow stress [MPa] A , & ! constant in the sinepowerlaw for flow stress  [/s] Q_stress , & ! activation energy in the sinepowerlaw for flow stress [J/mol] n , & ! stress exponent in the sinepower law for flow stress dt !time step for integration [s] integer , intent ( in ) :: en real ( pReal ), dimension (:), allocatable , intent ( out ) :: & diffusion_coefficient ! diffusion coefficient for Mg and Zn real ( pReal ), intent ( out ) :: & c_thermal_vacancy , & ! concentration in thermal vacancies production_rate , & ! production rate for excess vacancies annihilation_rate , & !annihilation rate for excess vacancies dislocation_density ![/m&#94;2] real ( pReal ) :: & mu , & !shear modulus [Pa] flow_stress , & ! flow stress in the material [Pa] c_j , & ! jog concentration - ref [1] strain !macroscopic strain diffusion_coefficient = prm % diffusion0 * exp ( - ( prm % migration_energy ) / ( Temperature * kb ) ) mu = calculate_shear_modulus ( Temperature ) ! if there is deformation, calculate the vacancy related parameters flow_stress = sigma_r * asinh ((( prm % strain_rate / ( A )) * exp ( Q_stress / ( 8.314 * Temperature ) )) ** ( 1 / n )) c_thermal_vacancy = 2 3.0 * exp ( - prm % vacancy_energy / ( kB * Temperature ) ) c_j = exp ( - prm % jog_formation_energy / ( kB * Temperature ) ) strain = prm % strain_rate * stt % time ( en ) dislocation_density = calculate_dislocation_density ( prm % rho_0 , prm % rho_s , strain ) ! calculate production and annihilation rate of excess vacancies as described in ref [1] and [3] production_rate = prm % vacancy_generation * flow_stress * prm % atomic_volume * prm % strain_rate & / prm % vacancy_energy & + 0.5 * c_j * prm % atomic_volume * prm % strain_rate / ( 4.0 * prm % burgers ** 3 ) annihilation_rate = prm % vacancy_diffusion0 * exp ( - prm % vacancy_migration_energy / ( kB * Temperature ) ) & * ( dislocation_density / prm % dislocation_arrangement ** 2 & + 1.0 / prm % vacancy_sink_spacing ** 2 ) & * stt % c_vacancy ( en ) ! variation in vacancy concentration dot % c_vacancy ( en ) = production_rate - annihilation_rate ! total number of vacancies stt % c_vacancy ( en ) = stt % c_vacancy ( en ) + dot % c_vacancy ( en ) * dt !update the diffusion coefficient as a function of the vacancy concentration ! the first term adds the contribution of excess vacancies,the second adds the contribution of dislocation pipe diffusion diffusion_coefficient = prm % diffusion0 * exp ( - prm % migration_energy / ( Temperature * kb ) ) & * ( 1.0 + stt % c_vacancy ( en ) / c_thermal_vacancy ) ! & !   +2*(dislocation_density)*prm%atomic_volume/prm%burgers& !   *prm%diffusion0*exp(-(prm%q_dislocation )/Temperature/kb) end subroutine set_initial_timestep_constants subroutine update_precipate_properties ( prm , dst , stt , en ) implicit none type ( tParameters ), intent ( in ) :: prm type ( tKwnpowerlawState ), intent ( in ) :: stt type ( tKwnpowerlawMicrostructure ), intent ( inout ) :: dst integer , intent ( in ) :: en integer :: bin real ( pReal ) :: radiusL , radiusR !stt%precipitate density contains all information to calculate mean radius, volume fraction and avg radius - calculate them now dst % precipitate_volume_frac ( en ) = 0.0_pReal dst % total_precipitate_density ( en ) = 0.0_pReal dst % avg_precipitate_radius ( en ) = 0.0_pReal ! update radius, total precipitate density and volume fraction kwnbins : do bin = 1 , prm % kwn_nSteps radiusL = prm % bins ( bin - 1 ) radiusR = prm % bins ( bin ) !update precipitate density dst % total_precipitate_density = dst % total_precipitate_density & + stt % precipitate_density ( bin , en ) & * ( radiusR - radiusL ) !update average radius dst % avg_precipitate_radius ( en ) = dst % avg_precipitate_radius ( en ) & + stt % precipitate_density ( bin , en ) & * ( radiusR ** 2.0_pReal - radiusL ** 2.0_pReal ) / 2.0_pReal ! at that stage in m/m&#94;3 !update volume fraction dst % precipitate_volume_frac ( en ) = dst % precipitate_volume_frac ( en ) & + 1.0_pReal / 6.0_pReal * PI & * ( radiusR + radiusL ) ** 3.0_pReal & * ( radiusR - radiusL ) & * stt % precipitate_density ( bin , en ) enddo kwnbins ! mean radius from m/m&#94;3 to m if ( dst % total_precipitate_density ( en ) > 0.0_pReal ) then dst % avg_precipitate_radius ( en ) = dst % avg_precipitate_radius ( en ) & / dst % total_precipitate_density ( en ) endif !update matrix composition dst % c_matrix (:, en ) = ( prm % c0_matrix (:) - dst % precipitate_volume_frac ( en ) * prm % ceq_precipitate (:)) & / ( 1 - dst % precipitate_volume_frac ( en )) end subroutine update_precipate_properties subroutine interface_composition ( Temperature , N_elements , N_steps , stoechiometry , & c_matrix , ceq_matrix , atomic_volume , na , molar_volume , ceq_precipitate , & bins , gamma_coherent , R , x_eq_interface , diffusion_coefficient , volume_fraction , misfit_energy ) !  find the intersection between stoichiometric line and solubility line for precipitates of different sizes by dichotomy - more information in ref [3] or [6] + [5] implicit none integer , intent ( in ) :: N_elements , N_steps integer , intent ( in ), dimension ( N_elements + 1 ) :: stoechiometry real ( pReal ), intent ( in ), dimension ( N_elements ) :: c_matrix , ceq_precipitate , diffusion_coefficient , ceq_matrix real ( pReal ), intent ( in ) :: Temperature , atomic_volume , na , molar_volume , gamma_coherent , R , volume_fraction , misfit_energy real ( pReal ), intent ( inout ), dimension ( 0 : N_steps ) :: x_eq_interface real ( pReal ), intent ( in ), dimension ( 0 : N_steps ) :: bins real ( pReal ) :: xmin , xmax , solubility_product , delta integer :: i xmin = 0.0_pReal xmax = 1.0_pReal interface_equilibrium : do i = 0 , N_steps ! the solubility product is only necessary in a ternary alloy as the interface energy has a simple expression for a binary alloy if ( stoechiometry ( 2 ) > 0 ) then !if (1==1) then solubility_product = ceq_matrix ( 1 ) ** stoechiometry ( 1 ) * ceq_matrix ( 2 ) ** stoechiometry ( 2 ) xmin = ceq_matrix ( 1 ) ! the equilibrium concentration at the interface for a precipitate of size r cannot be lower than that of a flat interface xmax = atomic_volume * na / molar_volume * ceq_precipitate ( 1 ) ! the equilibrium concentration at the interface cannot be higher than the concentration in the precipitate do while ( abs ( xmin - xmax ) / xmax > 0.0001 . AND . xmax > 1.0e-8 ) x_eq_interface ( i ) = ( xmin + xmax ) / 2.0 !  find the intersection between stoichiometric line and solubility line by dichotomy ! delta=0 ==> intersection between stoichiometry and solubility line delta = x_eq_interface ( i ) ** stoechiometry ( 1 ) * & (( c_matrix ( 2 ) + real ( stoechiometry ( 2 )) / real ( stoechiometry ( 1 )) * diffusion_coefficient ( 1 ) / diffusion_coefficient ( 2 ) * & ( x_eq_interface ( i ) * ( 1 - volume_fraction ) - c_matrix ( 1 ))) / ( 1 - volume_fraction )) ** stoechiometry ( 2 )& - solubility_product * exp ( 2.0 * molar_volume * gamma_coherent / R / Temperature / bins ( i ) * real ( sum ( stoechiometry )) ) if ( delta < 0.0_pReal ) then xmin = x_eq_interface ( i ) else xmax = x_eq_interface ( i ) endif enddo else x_eq_interface ( i ) = ceq_matrix ( 1 ) * exp (( 2.0 * molar_volume * gamma_coherent / ( R * Temperature * bins ( i ) * ceq_precipitate ( 1 ))) + molar_volume * misfit_energy / ( R * Temperature )) ! Gibbs Thomson effect for a precipitate with a single alloying element endif enddo interface_equilibrium end subroutine interface_composition subroutine growth_precipitate ( N_elements , N_steps , bins , interface_c , & x_eq_interface , atomic_volume , na , molar_volume , ceq_precipitate , precipitate_density , & dot_precipitate_density , nucleation_rate , diffusion_coefficient , c_matrix , growth_rate_array , radius_crit ) ! calculate precipitate growth rate for all class sizes implicit none integer , intent ( in ) :: N_Steps , N_elements real ( pReal ), intent ( in ), dimension ( 0 : N_steps ) :: bins , x_eq_interface real ( pReal ), intent ( in ), dimension ( N_steps ) :: precipitate_density real ( pReal ), intent ( in ), dimension ( N_elements ) :: ceq_precipitate , diffusion_coefficient , c_matrix real ( pReal ), intent ( in ) :: atomic_volume , na , molar_volume , nucleation_rate real ( pReal ), intent ( inout ), dimension ( N_steps ) :: dot_precipitate_density real ( pReal ), intent ( inout ), dimension ( 0 : N_steps ) :: growth_rate_array real ( pReal ), intent ( inout ) :: radius_crit real ( pReal ) :: radiusC , radiusL , radiusR , interface_c , growth_rate , flux integer :: bin ! the growth rate is stored to change the time step in the main program growth_rate_array = diffusion_coefficient ( 1 ) / bins & * ( c_matrix ( 1 ) - x_eq_interface ) & / ( atomic_volume * na / molar_volume * ceq_precipitate ( 1 ) - x_eq_interface ) kwnbins_growth : do bin = 1 , N_Steps - 1 ! consider two classes and their interface (radius_c) radiusC = bins ( bin ) ! center radiusL = bins ( bin - 1 ) ! left radiusR = bins ( bin + 1 ) ! right ! concentration at the interface between matrix and precipitate of the considered bin interface_c = x_eq_interface ( bin ) ! classical growth rate equation growth_rate = growth_rate_array ( bin ) ! if the growth rate is positive, precipitates grow (smaller class -> bigger class) and the flux is positive if ( growth_rate > 0.0_pReal ) then flux = precipitate_density ( bin ) * growth_rate ! if the growth rate is positive, precipitates shrink (bigger class -> smaller class) and the flux is negative else flux = precipitate_density ( bin + 1 ) * growth_rate endif dot_precipitate_density ( bin ) = dot_precipitate_density ( bin ) - flux / ( radiusC - radiusL ) dot_precipitate_density ( bin + 1 ) = dot_precipitate_density ( bin + 1 ) + flux / ( radiusR - radiusC ) ! populate the class of the critical radius with nucleating particle ! in binary alloys, the critical radius can be explicitely calculated and it's made in the main program ! for ternary alloys, the critical radius is calculated as the bin at which the growth rate is zero if ( c_matrix ( 2 ) > 0 ) then if ( growth_rate_array ( bin - 1 ) < 0 . and . growth_rate_array ( bin + 1 ) > 0 ) then radius_crit = radiusC dot_precipitate_density ( bin + 1 ) = dot_precipitate_density ( bin + 1 ) & + nucleation_rate / ( radiusR - radiusC ) endif else if ( radiusL <= radius_crit . and . radiusC > radius_crit ) then dot_precipitate_density ( bin + 1 ) = dot_precipitate_density ( bin + 1 ) & + nucleation_rate / ( radiusR - radiusC ) endif endif enddo kwnbins_growth end subroutine growth_precipitate end module KWN_model_routines","tags":"","loc":"sourcefile/kwn_model_routines.f90.html"},{"title":"KWN_data_types.f90 – KWN Deformation","text":"Contents Modules KWN_data_types Source Code KWN_data_types.f90 Source Code module KWN_data_types use KWN_precision type :: tParameters integer :: & kwn_nSteps ! discretization in r-space real ( pReal ) :: & kwn_stepsize , & ! discretization in r-space kwn_step0 ! minimum radius real ( pReal ) :: & lattice_param , & ! lattice parameter in meter atomic_volume , & ! atomic volume in meter&#94;3 molar_volume , & ! molar volume in m&#94;3/mol misfit_energy , & ! normalized precipitate misfit energy in J/m&#94;3 gamma_coherent , & ! coherent precipitate surface energy in J/m&#94;2 vacancy_generation , & ! vacancy generation rate coefficient vacancy_sink_spacing , & ! vacancy sink spacing vacancy_energy , & ! normalized vacancy formation energy (Q/kB) in 1/k vacancy_migration_energy , & ! solute migration energy in J/at vacancy_diffusion0 , & ! vacancy diffusivity in m&#94;2/s mean_radius_initial ,& ! average radius initial distribution in meters standard_deviation ,& ! standard deviation initial distribution (log normal law assumed) volume_fraction_initial , & ! initial total precipitate distribution rho_0 , & !initial dislocation density rho_s , & !saturation dislocation density strain_rate , & ! strain rate in /s dislocation_arrangement , & ! constant related to the dislocation density in the vacancy annihilation term, cf [1] burgers , & !matrice burgers vector jog_formation_energy , & ! formation energy for jogs q_dislocation , & ! activation energy for diffusion at dislocation (pipe diffusion) in J/at - not used yet but to be updated solute_strength ! constant related to the solid solution hardening- cf [2] ! the following variables are allocatable to allow for precipitates with multiple elements (only situations with 2 elements are used here) real ( pReal ), dimension (:), allocatable :: & c0_matrix , & ! initial matrix solute composition in mol fraction : [Mg, Zn] ceq_matrix , & ! equilibrium matrix composition for a flat interface (infinite precipitate radius) in mol fraction : [Mg, Zn] ceq_precipitate , & ! equilibrium precipitate composition in mol fraction : [Mg, Zn] diffusion0 , & ! solute diffusivity in m&#94;2/s : [Mg, Zn] - in the present version of the code - the diffusion coefficient is taken as identical for both solute and equal to the slowest diffuser (Mg) migration_energy !  solute migration energy in J/at real ( pReal ), dimension (:), allocatable :: & bins ! Bins for class sizes in KWN model character ( len = 15 ), allocatable , dimension (:) :: & output end type tParameters type :: tKwnpowerlawState real ( pReal ), pointer , dimension (:,:) :: & precipitate_density ! table with precipitate density number in each class size [/m&#94;4] real ( pReal ), dimension ( :), allocatable :: & c_vacancy , & ! concentration in excess vacancy time ! time [s] end type tKwnpowerlawState type :: tKwnpowerlawMicrostructure real ( pReal ), dimension (:), allocatable :: & total_precipitate_density , & avg_precipitate_radius , & precipitate_volume_frac real ( pReal ), dimension (:,:), allocatable :: c_matrix end type tKwnpowerlawMicrostructure end module KWN_data_types","tags":"","loc":"sourcefile/kwn_data_types.f90.html"},{"title":"KWN_precision.f90 – KWN Deformation","text":"Contents Modules KWN_precision Source Code KWN_precision.f90 Source Code module KWN_precision integer , parameter :: pReal = selected_real_kind ( 25 ) end module KWN_precision","tags":"","loc":"sourcefile/kwn_precision.f90.html"},{"title":"KWN_initialise.f90 – KWN Deformation","text":"Contents Modules KWN_initialise Source Code KWN_initialise.f90 Source Code module KWN_initialise use KWN_parameters use KWN_data_types , only : tParameters , tKwnpowerlawState , tKwnpowerlawMicrostructure use KWN_model_routines , only : interface_composition , growth_precipitate use KWN_model_functions , only : calculate_binary_alloy_critical_radius use KWN_io , only : read_configuration , output_results contains subroutine initialise_model_state ( prm , dot , stt , dst , & Nmembers , N_elements , en , & stoechiometry , normalized_distribution_function , & Temperature , radius_crit , interface_c , time_record_step , & c_thermal_vacancy , shape_parameter , sigma_r , A , & incubation , Q_stress , n , diffusion_coefficient , & dt , dt_max , total_time , growth_rate_array , & x_eq_interface , & filesuffix , testfolder & ) implicit none type ( tParameters ), intent ( out ) :: prm type ( tKwnpowerlawState ), intent ( out ) :: dot , stt type ( tKwnpowerlawMicrostructure ), intent ( out ) :: dst integer , intent ( out ) :: & Nmembers , & N_elements , & ! number of different elements in the precipitate en integer , dimension (:), allocatable , intent ( out ) :: stoechiometry !precipitate stoechiometry in the following order : Mg Zn Al real ( pReal ), dimension (:,:), allocatable , intent ( out ) :: & normalized_distribution_function !normalised distribution for the precipitate size real ( pReal ), dimension (:), allocatable , intent ( out ) :: & growth_rate_array , & !array that contains the precipitate growth rate of each bin x_eq_interface !array with equilibrium concentrations at the interface between matrix and precipitates of each bin real ( pReal ), intent ( out ) :: & Temperature , & !temperature in K radius_crit , & !critical radius, [m] interface_c , & !interface composition between matrix and a precipitate time_record_step , & ! time step for the output [s] c_thermal_vacancy , & ! concentration in thermal vacancies shape_parameter , & !shape parameter in the log normal distribution of the precipitates - ref [4] sigma_r , & ! constant in the sinepowerlaw for flow stress [MPa] A , & ! constant in the sinepowerlaw for flow stress  [/s] incubation , & ! incubation prefactor either 0 or 1 Q_stress , & ! activation energy in the sinepowerlaw for flow stress [J/mol] n ! stress exponent in the sinepower law for flow stress real ( pReal ), dimension (:), allocatable , intent ( out ) :: & diffusion_coefficient ! diffusion coefficient for Mg and Zn real ( pReal ), intent ( out ) :: & dt , & !time step for integration [s] dt_max , & ! max time step for integration [s] total_time ![s] character * 100 , intent ( out ) :: filesuffix !the file suffix contains the temperature and strain rate used for the simulation character * 100 , intent ( out ) :: testfolder !folder where the input file is ! local variables integer :: bin real ( pReal ) :: & radiusL , radiusR , radiusC , & ! used for the calculation of the growth rate in the different bins N_0 = 0.0 , & !parameter used dislocation_density , & ![/m&#94;2] production_rate , & ! production rate for excess vacancies annihilation_rate , & !annihilation rate for excess vacancies integral_dist_function , & ! used to calculate the initial distribution mean_particle_strength , & !particle strength for precipitation hardening effect calculation - ref[2] nucleation_rate , & ! part/m&#94;3/s deltaGv , & ! chemical driving force [J/mol] vol_int N_elements = 2 ! number of solute elements in the precipitate Nmembers = 1 ! Nmembers is the number of point in the simulation - here 1 as it's a single point model en = 1 time_record_step = 0.5 ! -------------------------- ! allocating variables needed for reading configuration file allocate ( prm % migration_energy ( N_elements ), source = 0.0_pReal ) allocate ( prm % diffusion0 ( N_elements ), source = 0.0_pReal ) allocate ( prm % c0_matrix ( N_elements ), source = 0.0_pReal ) allocate ( prm % ceq_matrix ( N_elements ), source = 0.0_pReal ) allocate ( prm % ceq_precipitate ( N_elements ), source = 0.0_pReal ) allocate ( stoechiometry ( N_elements + 1 )) !!! read the configuration file, using data arrays allocated above call read_configuration ( & testfolder , & prm , & Temperature , & shape_parameter , & ! the initial distribution is defined by mean radius, volume fraction and shape parameter of a log normal distribution - see e.g. ref [4] total_time , & ![s] dt_max , & ![s] time_record_step , & ![s] sigma_r , & ![MPa] - sinepower law for stress A , & ![/s] - sinepower law for stress Q_stress , & ![J/mol] - activation energy in flow stress law n , & !exponent in sinepower law for stress incubation , & !incubation prefactor, either 0 or 1) stoechiometry , & N_elements & ) !-------- add a backslash to the folder path testfolder = trim ( testfolder ) // '/' !----------- allocate variables not needed in configuration file ! scalar values allocate ( dst % total_precipitate_density ( Nmembers ), source = 0.0_pReal ) allocate ( dst % avg_precipitate_radius ( Nmembers ), source = 0.0_pReal ) allocate ( dst % precipitate_volume_frac ( Nmembers ), source = 0.0_pReal ) ! size of the array = number of considered elements allocate ( dst % c_matrix ( N_elements , Nmembers ), source = 0.0_pReal ) ! size of these arrays: number of bins allocate ( prm % bins ( 0 : prm % kwn_nSteps ), source = 0.0_pReal ) allocate ( dot % precipitate_density ( prm % kwn_nSteps , 1 ), source = 0.0_pReal ) ! time derivative of the precipitate density in each bin allocate ( stt % precipitate_density ( prm % kwn_nSteps , 1 ), source = 0.0_pReal ) ! precipitate density in each bin allocate ( normalized_distribution_function ( prm % kwn_nSteps , 1 ), source = 0.0_pReal ) ! distribution function for precipitate density [/m&#94;4] allocate ( growth_rate_array ( prm % kwn_nSteps - 1 ), source = 0.0_pReal ) ! array containing the growth rate in each bin allocate ( x_eq_interface ( 0 : prm % kwn_nSteps ), source = 0.0_pReal ) ! equilibrium concentration at the interface taking into account Gibbs Thomson effect (one equilibrium concentration for each bin) allocate ( stt % time ( Nmembers ), source = 0.0_pReal ) ! Time array allocate ( stt % c_vacancy ( Nmembers ), source = 0.0_pReal ) ! Number of excess vacancies allocate ( dot % c_vacancy ( Nmembers ), source = 0.0_pReal ) !Time derivative of excess vacancies !!! some conversions prm % migration_energy = prm % migration_energy / na ! convert form J/mol to J/at prm % jog_formation_energy = prm % jog_formation_energy * ev_to_Jat ! convert from ev to  J/at prm % q_dislocation = prm % q_dislocation / na ! convert to J/at prm % vacancy_energy = prm % vacancy_energy * ev_to_Jat ! convert from ev to  J/at prm % vacancy_migration_energy = prm % vacancy_migration_energy * ev_to_Jat ! convert from ev to  J/at prm % standard_deviation = 0.0 ! set to zero for initialisation prm % ceq_precipitate = real ( stoechiometry ( 1 : 2 )) / real ( sum ( stoechiometry )) ! calculate the concentration of the precipitate from the stoichiometry ! initial value for the time step dt = 0.001 ! if the initial value for the time step is higher than dt max replace by dt max dt = min ( dt_max , dt ) ! define the output file suffix (contains Temperature in °C and strain rate in /s) write ( filesuffix , '(I3,\"C_strain_rate\",ES9.3, \".txt\")' ) int ( Temperature ) - 273 , prm % strain_rate !! initialise the bins for the size distribution ! SAM: Adjusted binning !--------------------------------------------------------------------------------------------------------------------------------- kwnbins_init : do bin = 0 , prm % kwn_nSteps if ( prm % kwn_step0 < 0.0 ) then ! if initial step is smaller than 0 then make log bins prm % bins ( bin ) = 10 ** ( real ( bin , pReal ) * prm % kwn_stepsize + prm % kwn_step0 ) else ! otherwise linear bins are used prm % bins ( bin ) = real ( bin , pReal ) * prm % kwn_stepsize + prm % kwn_step0 endif enddo kwnbins_init !--------------------------------------------------------------------------------------------------------------------------------- !initialize some outputs growth_rate_array = 0.0_pReal stt % precipitate_density = 0.0_pReal dst % total_precipitate_density ( en ) = 0.0_pReal dst % avg_precipitate_radius ( en ) = prm % mean_radius_initial dst % precipitate_volume_frac ( en ) = prm % volume_fraction_initial stt % c_vacancy ( en ) = 0.0_pReal dislocation_density = prm % rho_0 !Calculated the precipitate density from the initial mean radius and volume fraction for an already existing distribution if ( dst % avg_precipitate_radius ( en ) > 0 ) then distribution_function : do bin = 1 , prm % kwn_nSteps !definition of a log normal distribution radiusL = prm % bins ( bin - 1 ) radiusR = prm % bins ( bin ) radiusC = ( radiusL + radiusR ) / 2 normalized_distribution_function ( bin , en ) = 1.0_pReal / sqrt ( PI * 2.0_pReal ) & / shape_parameter / radiusC & * exp ( - 1.0 / 2.0 * & ( log ( radiusC / prm % mean_radius_initial ) & + shape_parameter ** 2 / 2 ) ** 2 / shape_parameter ** 2 ) enddo distribution_function print * , normalized_distribution_function ! calculate the integral of the distribution function integral_dist_function = 0.0_pReal do bin = 1 , prm % kwn_nSteps radiusL = prm % bins ( bin - 1 ) radiusR = prm % bins ( bin ) integral_dist_function = integral_dist_function + ( radiusR - radiusL ) * normalized_distribution_function ( bin , en ) enddo print * , 'integral dist' , integral_dist_function ! normalized_distribution is not normalised yet normalized_distribution_function (:, en ) = normalized_distribution_function (:, en ) / integral_dist_function ! now it is normalised !the normalized distribution function gives the shape of the distribution, it needs to be multiplied by the number density N0 such that the initial precipitate fraction is the one given as input ! calculate the volume integral of the normalised precipitate distribution vol_int = 0.0 do bin = 1 , prm % kwn_nSteps radiusL = prm % bins ( bin - 1 ) radiusR = prm % bins ( bin ) radiusC = ( radiusL + radiusR ) / 2 vol_int = vol_int + normalized_distribution_function ( bin , en ) * radiusC ** 3 * ( radiusR - RadiusL ) * 4.0 / 3.0 * PI enddo !number density * total volume of precipitates = volume fraction N_0 = dst % precipitate_volume_frac ( en ) / vol_int ! now the normalised distribution function is multiplied by the total number density to get the number density per bin size [m&#94;{-4}] stt % precipitate_density (:, en ) = normalized_distribution_function (:, en ) * N_0 dst % total_precipitate_density ( en ) = N_0 stt % precipitate_density ( 1 , en ) = 0 ! to avoid some problems when writing the outputs do bin = 1 , prm % kwn_nSteps if ( stt % precipitate_density ( bin , en ) < 1.0e-50_pReal ) then stt % precipitate_density ( bin , en ) = 0.0_pReal endif enddo ! initialise time derivative dot % precipitate_density = stt % precipitate_density / dt !recompute the initial radius, volume fraction etc to avoid discontinuities between first and next steps dst % avg_precipitate_radius ( en ) = 0.0_pReal dst % total_precipitate_density = 0.0_pReal dst % precipitate_volume_frac ( en ) = 0.0_pReal do bin = 1 , prm % kwn_nSteps radiusL = prm % bins ( bin - 1 ) radiusR = prm % bins ( bin ) !update precipitate density dst % total_precipitate_density ( en ) = dst % total_precipitate_density ( en ) & + stt % precipitate_density ( bin , en ) & * ( radiusR - radiusL ) !update average radius dst % avg_precipitate_radius ( en ) = dst % avg_precipitate_radius ( en ) & + stt % precipitate_density ( bin , en ) & * ( radiusR ** 2.0_pReal - radiusL ** 2.0_pReal ) / 2.0_pReal ! at that stage in m/m&#94;3 !update volume fraction dst % precipitate_volume_frac ( en ) = dst % precipitate_volume_frac ( en ) & + 1.0_pReal / 6.0_pReal * PI & * ( radiusR + radiusL ) ** 3.0_pReal & * ( radiusR - radiusL ) & * stt % precipitate_density ( bin , en ) enddo !convert from m/m&#94;3 to m if ( dst % total_precipitate_density ( en ) > 0.0_pReal ) then dst % avg_precipitate_radius ( en ) = dst % avg_precipitate_radius ( en ) & / dst % total_precipitate_density ( en ) endif endif !initialize the concentration in the matrix as a function of the volume fraction and composition of precipitate dst % c_matrix (:, en ) = ( prm % c0_matrix (:) - dst % precipitate_volume_frac ( en ) * prm % ceq_precipitate (:) ) & / ( 1.0 - dst % precipitate_volume_frac ( en ) ) !calculate initial diffusion coefficient diffusion_coefficient = prm % diffusion0 * exp ( - ( prm % migration_energy ) / Temperature / kb ) ! +2*(dislocation_density)*prm%atomic_volume/prm%burgers& !   *prm%diffusion0*exp(-(prm%q_dislocation )/Temperature/kb)  ! include pipe diffusion !calculate the equilibrium composition at the interface between precipitates and matrix as a function of their size (Gibbs Thomson effect) call interface_composition ( Temperature , N_elements , prm % kwn_nSteps , stoechiometry , prm % c0_matrix , prm % ceq_matrix , & prm % atomic_volume , na , prm % molar_volume , prm % ceq_precipitate , prm % bins , prm % gamma_coherent , & R , x_eq_interface , diffusion_coefficient , dst % precipitate_volume_frac ( en ), prm % misfit_energy ) !TODO: Have users set N_elements, and test for N_elements==1 here to define a binary alloy ! calculate critical radius in the case of a binary alloy if ( dst % c_matrix ( 2 , en ) == 0 ) then radius_crit = calculate_binary_alloy_critical_radius ( Temperature , dst , prm , en ) end if !calculate the initial growth rate of precipitates of all sizes call growth_precipitate ( N_elements , prm % kwn_nSteps , prm % bins , interface_c , x_eq_interface , prm % atomic_volume , & na , prm % molar_volume , prm % ceq_precipitate , stt % precipitate_density , & dot % precipitate_density (:, en ), nucleation_rate , diffusion_coefficient , & dst % c_matrix (:, en ), growth_rate_array , radius_crit ) !the critical radius for dissolution if calculated from the precipitate growth rate array - display it print * , 'radius crit:' , radius_crit * 1.0e9 , ' nm' c_thermal_vacancy = 1.0 production_rate = 0.0 annihilation_rate = 0.0 print * , 'Initial mean radius :' , dst % avg_precipitate_radius print * , 'Initial precipitate density :' , dst % total_precipitate_density ( en ) print * , 'Initial volume fraction :' , dst % precipitate_volume_frac ( en ) print * , 'Bulk composition' , prm % c0_matrix (:) print * , 'Initial matrix composition :' , dst % c_matrix (:, en ) print * , 'Equilibrium composition, precipitate :' , prm % ceq_precipitate print * , 'Equilibrium composition matrix :' , prm % ceq_matrix call initialise_outputs ( testfolder , filesuffix , prm , stt , dst , nucleation_rate , radius_crit , & shape_parameter , Temperature , dt , dt_max , growth_rate_array , & mean_particle_strength , Q_stress , & time_record_step , total_time , x_eq_interface , en ) call output_results ( testfolder , filesuffix , stt , dst , diffusion_coefficient , c_thermal_vacancy , & nucleation_rate , production_rate , annihilation_rate , dislocation_density , & radius_crit , en ) end subroutine initialise_model_state subroutine initialise_outputs ( testfolder , filesuffix , prm , stt , dst , nucleation_rate , radius_crit , & shape_parameter , Temperature , dt , dt_max , growth_rate_array , & mean_particle_strength , Q_stress , & time_record_step , total_time , x_eq_interface , en ) type ( tParameters ), intent ( in ) :: prm type ( tKwnpowerlawState ), intent ( in ) :: stt type ( tKwnpowerlawMicrostructure ), intent ( in ) :: dst real ( pReal ), dimension (:), allocatable , intent ( in ) :: & growth_rate_array , & !array that contains the precipitate growth rate of each bin x_eq_interface !array with equilibrium concentrations at the interface between matrix and precipitates of each bin real ( pReal ), intent ( in ) :: & Q_stress , & ! activation energy in the sinepowerlaw for flow stress [J/mol] dt , & !time step for integration [s] dt_max , & ! max time step for integration [s] time_record_step , & ! time step for the output [s] total_time , & ![s] Temperature , & !temperature in K mean_particle_strength , & !particle strength for precipitation hardening effect calculation - ref[2] shape_parameter , & !shape parameter in the log normal distribution of the precipitates - ref [4] nucleation_rate , & ! part/m&#94;3/s radius_crit !critical radius, [m] character * 100 , intent ( in ) :: filesuffix !the file suffix contains the temperature and strain rate used for the simulation character * 100 , intent ( in ) :: testfolder !folder where the input file is integer , intent ( in ) :: en ! local variables character * 100 :: filename !name of the gile where the outputs will be written integer :: bin , i !Write the initial precipitate distribution in a textfile filename = 'results/initial_precipitation_distribution_' filename = trim ( testfolder ) // trim ( filename ) // trim ( filesuffix ) open ( 1 , file = filename , ACTION = \"write\" , STATUS = \"replace\" ) write ( 1 , * ) ' # Bin [m], Precipitate density distribution [/m&#94;4]' do bin = 1 , prm % kwn_nSteps if ( sum ( stt % precipitate_density (:, en )) > 0.0_pReal ) then write ( 1 , 901 ) prm % bins ( bin ), stt % precipitate_density ( bin , en ) / sum ( stt % precipitate_density (:, en )) else write ( 1 , 901 ) prm % bins ( bin ), stt % precipitate_density ( bin , en ) endif enddo close ( 1 ) ! record the temperature (for versions where there would be a temperature ramp for example) filename = 'results/temperature_' filename = trim ( testfolder ) // trim ( filename ) // trim ( filesuffix ) open ( 1 , file = filename , ACTION = \"write\" , STATUS = \"replace\" ) write ( 1 , * ) '# Time [s], Temperature [K]' close ( 1 ) ! record the diffusion coefficient filename = 'results/diffusion_coefficient_' filename = trim ( testfolder ) // trim ( filename ) // trim ( filesuffix ) open ( 1 , file = filename , ACTION = \"write\" , STATUS = \"replace\" ) write ( 1 , * ) '# Time [s], Diffusion coefficient [m&#94;2/s] ' close ( 1 ) ! record the number of excess vacancies filename = 'results/vacancies_' filename = trim ( testfolder ) // trim ( filename ) // trim ( filesuffix ) open ( 1 , file = filename , ACTION = \"write\" , STATUS = \"replace\" ) write ( 1 , * ) '# Time [s], c_{ex}/c_{th}, total number of produced vacancies/c_{th}, total number of annihilated vacancies /c_{th}' close ( 1 ) ! record the dislocation density filename = 'results/dislocation_density_' filename = trim ( testfolder ) // trim ( filename ) // trim ( filesuffix ) open ( 1 , file = filename , ACTION = \"write\" , STATUS = \"replace\" ) write ( 1 , * ) '# Time [s], dislocation density [/m&#94;2]' close ( 1 ) ! this file will be used to store most of the results filename = 'results/kinetics_data_' filename = trim ( testfolder ) // trim ( filename ) // trim ( filesuffix ) open ( 1 , file = filename , ACTION = \"write\" , STATUS = \"replace\" ) write ( 1 , * ) '#Time, [s], Average Radius [nm], Total precipitate density [/micron&#94;3], Volume fraction [], Concentration in the matrix [at %]' close ( 1 ) ! Write all the input parameters in a file filename = 'results/KWN_parameters_' filename = trim ( testfolder ) // trim ( filename ) // trim ( filesuffix ) open ( 201 , file = filename , ACTION = \"write\" , STATUS = \"replace\" ) WRITE ( 201 , * ) ' ' WRITE ( 201 , * ) 'KWN parameters' WRITE ( 201 , * ) ' ' WRITE ( 201 , 100 ) prm % gamma_coherent 100 FORMAT ( 'Interfacial energy: ' , F7 . 3 , ' J/m&#94;2' ) WRITE ( 201 , 200 ) prm % migration_energy ( 1 ) * na 200 FORMAT ( 'Migration energy: ' , E30 . 6 , ' J/mol' ) WRITE ( 201 , 300 ) prm % diffusion0 ( 1 ) 300 FORMAT ( 'D0: ' , E30 . 6 , ' m&#94;2/s' ) WRITE ( 201 , * ) ' ' WRITE ( 201 , * ) 'Initial distribution' WRITE ( 201 , 302 ) prm % mean_radius_initial 302 FORMAT ( 'Initial mean radius: ' , E30 . 6 , ' m' ) WRITE ( 201 , 303 ) prm % volume_fraction_initial 303 FORMAT ( 'Initial volume fraction: ' , F7 . 3 ) WRITE ( 201 , 304 ) prm % standard_deviation 304 FORMAT ( 'Standard deviation: ' , E30 . 6 ) WRITE ( 201 , 320 ) shape_parameter 320 FORMAT ( 'Shape parameter: ' , F7 . 3 ) WRITE ( 201 , * ) ' ' WRITE ( 201 , 315 ) prm % kwn_step0 315 FORMAT ( 'Starting bin : ' , E30 . 6 , ' m' ) WRITE ( 201 , 316 ) prm % kwn_stepsize 316 FORMAT ( 'Bin width : ' , E30 . 6 , ' m' ) WRITE ( 201 , 317 ) prm % kwn_nSteps 317 FORMAT ( 'Number of steps : ' , I4 ) WRITE ( 201 , * ) ' ' WRITE ( 201 , * ) 'Vacancy model parameters ' WRITE ( 201 , 307 ) prm % vacancy_energy / ( 1.602176634e-19 ) 307 FORMAT ( 'Vacancy formation energy: ' , F7 . 3 , ' [eV]' ) WRITE ( 201 , 308 ) prm % vacancy_migration_energy / ( 1.602176634e-19 ) 308 FORMAT ( 'Vacancy migration energy: ' , F7 . 3 , ' [eV]' ) WRITE ( 201 , 309 ) prm % vacancy_diffusion0 309 FORMAT ( 'Pre-factor diffusion vacancy: ' , E30 . 6 , ' [m&#94;2/s]' ) WRITE ( 201 , 305 ) prm % vacancy_generation 305 FORMAT ( 'Mechanical vacancy production constant: ' , F7 . 3 , ' []' ) WRITE ( 201 , 306 ) prm % vacancy_sink_spacing 306 FORMAT ( 'Vacancy sink spacing (grain size): ' , E30 . 6 , ' [m]' ) WRITE ( 201 , 310 ) prm % jog_formation_energy / ( 1.602176634e-19 ) 310 FORMAT ( 'Jog formation energy: ' , F7 . 3 , ' [eV]' ) WRITE ( 201 , 311 ) prm % dislocation_arrangement 311 FORMAT ( 'Dislocation arrangement parameter: ' , F7 . 3 , ' []' ) WRITE ( 201 , 312 ) prm % rho_0 312 FORMAT ( 'Initial dislocation density: ' , E30 . 6 , ' [/m&#94;2]' ) WRITE ( 201 , 318 ) prm % rho_s 318 FORMAT ( 'Saturation dislocation density: ' , E30 . 6 , ' [/m&#94;2]' ) WRITE ( 201 , * ) '' WRITE ( 201 , * ) 'Deformation conditions' WRITE ( 201 , 313 ) prm % strain_rate 313 FORMAT ( 'Strain rate: ' , E30 . 6 , ' [/m&#94;2]' ) WRITE ( 201 , 314 ) Temperature - 273 314 FORMAT ( 'Temperature: ' , F7 . 3 , ' [°C]' ) close ( 201 ) 601 FORMAT ( 2E40 . 6 ) 901 FORMAT ( 3E40 . 6 ) 1001 FORMAT ( 4E40 . 6 ) end subroutine initialise_outputs end module KWN_initialise","tags":"","loc":"sourcefile/kwn_initialise.f90.html"}]}